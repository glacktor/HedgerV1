import logging
import time
import asyncio
from typing import Dict, Tuple

logger = logging.getLogger(__name__)


class SimplePnLCloser:
    def __init__(self, closer):
        """
        –ü—Ä–æ—Å—Ç–∞—è PnL –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π

        Args:
            closer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PositionCloser
        """
        self.closer = closer
        self.entry_data = None

    async def start_monitoring(self, target_pnl_percent: float = 0.3):
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ PnL —Å –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ–º

        Args:
            target_pnl_percent: –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –≤ % (default: 0.3%)
        """
        logger.info(f"üéØ –ó–∞–ø—É—Å–∫ PnL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: —Ü–µ–ª—å = {target_pnl_percent}%")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ö–æ–¥–µ
        self.entry_data = await self._capture_entry_state()
        if not self.entry_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞")
            return False

        logger.info(f"üìä Entry –¥–∞–Ω–Ω—ã–µ: {self.entry_data}")

        start_time = time.time()
        check_count = 0

        while True:
            check_count += 1

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π PnL
            current_pnl = await self._calculate_simple_pnl()

            runtime_minutes = (time.time() - start_time) / 60

            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–ª–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            if check_count % 10 == 0 or runtime_minutes >= 1:
                logger.info(f"üí∞ PnL: {current_pnl:.4f}% | Runtime: {runtime_minutes:.1f}m | Checks: {check_count}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            if current_pnl >= target_pnl_percent:
                logger.info(f"üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! PnL={current_pnl:.4f}% >= {target_pnl_percent}%")

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                success = await self._execute_close()
                if success:
                    logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é!")
                    return True
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                    return False

            # –ó–∞—â–∏—Ç–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
            elif current_pnl <= -2.0:
                logger.warning(f"üõë –°–¢–û–ü-–õ–û–°–°! PnL={current_pnl:.4f}% <= -2.0%")
                await self._execute_emergency_close()
                return False

            await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

    async def _capture_entry_state(self) -> Dict:
        """–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            pos1_long = await self.closer.exchange1_ws.get_position_size(self.closer.asset, "long")
            pos1_short = await self.closer.exchange1_ws.get_position_size(self.closer.asset, "short")
            pos2_long = await self.closer.exchange2_ws.get_position_size(self.closer.asset, "long")
            pos2_short = await self.closer.exchange2_ws.get_position_size(self.closer.asset, "short")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            current_prices = await self.closer._get_current_prices()

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            config = self.closer.config.get('trading_parameters', {})
            leverage = config.get('leverage', 3.0)
            margin = config.get('margin', 50.0)

            return {
                "positions": {
                    "exchange1_long": pos1_long,
                    "exchange1_short": pos1_short,
                    "exchange2_long": pos2_long,
                    "exchange2_short": pos2_short
                },
                "entry_prices": current_prices,
                "leverage": leverage,
                "margin": margin,
                "timestamp": time.time()
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ entry –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    async def _calculate_simple_pnl(self) -> float:
        """
        –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

        Returns:
            PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –º–∞—Ä–∂–∏
        """
        try:
            if not self.entry_data:
                return 0

            # –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            current_prices = await self.closer._get_current_prices()

            # Entry –¥–∞–Ω–Ω—ã–µ
            entry_prices = self.entry_data["entry_prices"]
            positions = self.entry_data["positions"]
            leverage = self.entry_data["leverage"]
            margin = self.entry_data["margin"]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
            total_pnl_usd = 0

            # Exchange 1 - –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—è
            if positions["exchange1_long"] > 0:
                price_diff = current_prices["exchange1"] - entry_prices["exchange1"]
                pnl_usd = price_diff * positions["exchange1_long"]
                total_pnl_usd += pnl_usd
                logger.debug(f"Exchange1 Long PnL: {pnl_usd:.4f} USD")

            # Exchange 1 - —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—è
            if positions["exchange1_short"] > 0:
                price_diff = entry_prices["exchange1"] - current_prices["exchange1"]
                pnl_usd = price_diff * positions["exchange1_short"]
                total_pnl_usd += pnl_usd
                logger.debug(f"Exchange1 Short PnL: {pnl_usd:.4f} USD")

            # Exchange 2 - –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—è
            if positions["exchange2_long"] > 0:
                price_diff = current_prices["exchange2"] - entry_prices["exchange2"]
                pnl_usd = price_diff * positions["exchange2_long"]
                total_pnl_usd += pnl_usd
                logger.debug(f"Exchange2 Long PnL: {pnl_usd:.4f} USD")

            # Exchange 2 - —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—è
            if positions["exchange2_short"] > 0:
                price_diff = entry_prices["exchange2"] - current_prices["exchange2"]
                pnl_usd = price_diff * positions["exchange2_short"]
                total_pnl_usd += pnl_usd
                logger.debug(f"Exchange2 Short PnL: {pnl_usd:.4f} USD")

            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 0.05% –æ—Ç –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏)
            total_volume = sum(positions.values())
            commission_usd = total_volume * 0.0005 * leverage  # 0.05% –∫–æ–º–∏—Å—Å–∏–∏

            # –ò—Ç–æ–≥–æ–≤—ã–π PnL –≤ USD —Å –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
            net_pnl_usd = total_pnl_usd - commission_usd

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –æ—Ç –º–∞—Ä–∂–∏
            pnl_percent = (net_pnl_usd / margin) * 100

            logger.debug(
                f"PnL —Ä–∞—Å—á–µ—Ç: {total_pnl_usd:.4f} USD - {commission_usd:.4f} –∫–æ–º–∏—Å—Å–∏–∏ = {net_pnl_usd:.4f} USD ({pnl_percent:.4f}%)")

            return pnl_percent

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL: {e}")
            return -999

    async def _execute_close(self) -> bool:
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏"""
        try:
            logger.info("üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è...")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å
            positions = self.entry_data["positions"]

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è LongShort —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (long –Ω–∞ 1–π, short –Ω–∞ 2–π)
            if positions["exchange1_long"] > 0 and positions["exchange2_short"] > 0:
                return await self.closer.close_positions_aggressive(
                    positions["exchange1_long"],  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
                    positions["exchange2_short"],  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç
                    "short",  # –ü—Ä–æ–¥–∞–µ–º —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –ª–æ–Ω–≥
                    "long"  # –ü–æ–∫—É–ø–∞–µ–º —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —à–æ—Ä—Ç
                )

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è ShortLong —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (short –Ω–∞ 1–π, long –Ω–∞ 2–π)
            elif positions["exchange1_short"] > 0 and positions["exchange2_long"] > 0:
                return await self.closer.close_positions_aggressive(
                    positions["exchange1_short"],  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç
                    positions["exchange2_long"],  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
                    "long",  # –ü–æ–∫—É–ø–∞–µ–º —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —à–æ—Ä—Ç
                    "short"  # –ü—Ä–æ–¥–∞–µ–º —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –ª–æ–Ω–≥
                )

            # –ï—Å–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            else:
                logger.warning("‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ")
                return await self.closer.emergency_close_all()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return False

    async def _execute_emergency_close(self) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ"""
        logger.warning("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É!")
        try:
            return await self.closer.emergency_close_all()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return False

    async def check_current_pnl(self) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ PnL"""
        if not self.entry_data:
            self.entry_data = await self._capture_entry_state()

        current_pnl = await self._calculate_simple_pnl()

        logger.info(f"üìä –¢–µ–∫—É—â–∏–π PnL: {current_pnl:.4f}%")

        if current_pnl >= 0.3:
            logger.info("üéâ PnL –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ 0.3%!")
        elif current_pnl <= -2.0:
            logger.warning("üõë PnL –¥–æ—Å—Ç–∏–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ -2.0%!")
        else:
            logger.info("‚è≥ PnL –≤ –Ω–æ—Ä–º–µ")

        return current_pnl


# === –ü–†–û–°–¢–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø run_strategy.py ===

async def simple_pnl_close():
    """–ü—Ä–æ—Å—Ç–æ–µ PnL –∑–∞–∫—Ä—ã—Ç–∏–µ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç—ã
        from logic.PositionCloser import create_position_closer

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π PositionCloser
        closer = await create_position_closer(
            exchange1_name="Binance",
            exchange2_name="Hyperliquid",
            asset="FARTCOIN",
            config_path="config.json"  # –ü—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É
        )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PnL –º–æ–Ω–∏—Ç–æ—Ä
        pnl_monitor = SimplePnLCloser(closer)

        logger.info("‚úÖ SimplePnLCloser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("üéØ –¶–µ–ª—å: 0.3% –ª–µ–≤–µ—Ä–µ–¥–∂–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏")
        logger.info("üõë –°—Ç–æ–ø: -2.0% —É–±—ã—Ç–∫–∞")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        result = await pnl_monitor.start_monitoring(target_pnl_percent=0.3)

        logger.info(f"üèÅ PnL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ simple_pnl_close: {e}")
        return False


async def quick_pnl_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ PnL"""
    try:
        from logic.PositionCloser import create_position_closer

        closer = await create_position_closer("Binance", "Hyperliquid", "FARTCOIN", "config.json")
        pnl_monitor = SimplePnLCloser(closer)

        current_pnl = await pnl_monitor.check_current_pnl()

        return current_pnl

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ quick_pnl_check: {e}")
        return None


async def force_close_if_profitable():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ PnL > 0.3%"""
    try:
        from logic.PositionCloser import create_position_closer

        closer = await create_position_closer("Binance", "Hyperliquid", "FARTCOIN", "config.json")
        pnl_monitor = SimplePnLCloser(closer)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL
        current_pnl = await pnl_monitor.check_current_pnl()

        if current_pnl >= 0.3:
            logger.info(f"üí∞ PnL={current_pnl:.4f}% >= 0.3% - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï!")
            return await pnl_monitor._execute_close()
        else:
            logger.info(f"‚è≥ PnL={current_pnl:.4f}% < 0.3% - –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ force_close_if_profitable: {e}")
        return False