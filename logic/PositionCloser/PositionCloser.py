import logging
import time
import asyncio
import json
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


class PositionCloser:
    def __init__(self, exchange1_ws, exchange1_info, exchange2_ws, exchange2_info,
                 exchange1_name: str, exchange2_name: str, asset: str, config: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫—Ä—ã–≤–∞—Ç–µ–ª—è –ø–æ–∑–∏—Ü–∏–π

        Args:
            exchange1_ws: WebSocket –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–∏
            exchange1_info: Info –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–∏
            exchange2_ws: WebSocket –∫–ª–∏–µ–Ω—Ç –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–∏
            exchange2_info: Info –∫–ª–∏–µ–Ω—Ç –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–∏
            exchange1_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–∏
            exchange2_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–∏
            asset: –¢–æ—Ä–≥–æ–≤—ã–π –∞–∫—Ç–∏–≤
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        self.exchange1_ws = exchange1_ws
        self.exchange1_info = exchange1_info
        self.exchange2_ws = exchange2_ws
        self.exchange2_info = exchange2_info
        self.exchange1_name = exchange1_name
        self.exchange2_name = exchange2_name
        self.asset = asset
        self.config = config

    async def close_positions_limit(self, qty1: float, qty2: float,
                                    direction1: str = "short", direction2: str = "long"):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ª–∏–º–∏—Ç–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–±)

        Args:
            qty1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
            qty2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
            direction1: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ ("long" –∏–ª–∏ "short")
            direction2: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ ("long" –∏–ª–∏ "short")
        """
        logger.info(f'üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–∏–º–∏—Ç–∞–º–∏: {qty1} {direction1} | {qty2} {direction2}')

        step = 0
        parts = self.config.get('trading_parameters', {}).get('parts', 3)

        while step < parts:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏
            firstOrderbook = await self.exchange1_info.get_orderbook(symbol=self.asset)
            secondOrderbook = await self.exchange2_info.get_orderbook(symbol=self.asset)

            if not (firstOrderbook.get('bids') and firstOrderbook.get('asks') and
                    secondOrderbook.get('bids') and secondOrderbook.get('asks')):
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–±—É–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏")
                await asyncio.sleep(1)
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            first_bid = float(firstOrderbook['bids'][0][0])
            first_ask = float(firstOrderbook['asks'][0][0])
            second_bid = float(secondOrderbook['bids'][0][0])
            second_ask = float(secondOrderbook['asks'][0][0])

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            current_spread = second_bid / first_ask
            spread_threshold = self.config.get('trading_parameters', {}).get('max_spread_close_percent', 1.001)

            logger.info(f'üìä –°–ø—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è: {current_spread:.6f} | –ø–æ—Ä–æ–≥: {spread_threshold}')

            if current_spread < spread_threshold:
                logger.info('üéØ –í—ã–≥–æ–¥–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è!')

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
                price1 = first_ask if direction1 == "long" else first_bid
                price2 = second_bid if direction2 == "short" else second_ask

                # –†–∞–∑–º–µ—â–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
                start_time = time.time()
                frstOrdr, scndOrdr = await asyncio.gather(
                    self.exchange1_ws.close_limit_order(
                        symbol=self.asset, side=direction1, price=price1, qty=qty1
                    ),
                    self.exchange2_ws.close_limit_order(
                        symbol=self.asset, side=direction2, price=price2, qty=qty2
                    ),
                    return_exceptions=True
                )

                execution_time = (time.time() - start_time) * 1000
                logger.info(f'‚ö° –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞: {execution_time:.1f}ms')

                if isinstance(frstOrdr, Exception) or isinstance(scndOrdr, Exception):
                    logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤: {frstOrdr if isinstance(frstOrdr, Exception) else scndOrdr}')
                    await asyncio.sleep(1)
                    continue

                # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                success = await self._wait_for_fill(frstOrdr, scndOrdr, qty1, qty2)
                if success:
                    step += 1
                    logger.info(f'‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —à–∞–≥ {step}/{parts} –∑–∞–≤–µ—Ä—à–µ–Ω')

            else:
                await asyncio.sleep(0.5)

        logger.info(f'üèÅ –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
        return True

    async def close_positions_market(self, qty1: float, qty2: float,
                                     direction1: str = "short", direction2: str = "long"):
        """
        –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞–º–∏

        Args:
            qty1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
            qty2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
            direction1: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
            direction2: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
        """
        logger.info(f'üí• –ú–ê–†–ö–ï–¢ –ó–ê–ö–†–´–¢–ò–ï: {qty1} {direction1} | {qty2} {direction2}')

        start_time = time.time()

        # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞
        results = await asyncio.gather(
            self.exchange1_ws.close_market_order(self.asset, direction1, qty1),
            self.exchange2_ws.close_market_order(self.asset, direction2, qty2),
            return_exceptions=True
        )

        execution_time = (time.time() - start_time) * 1000
        logger.info(f'‚ö° –ú–∞—Ä–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ: {execution_time:.1f}ms')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result1, result2 = results

        if isinstance(result1, Exception):
            logger.error(f'‚ùå {self.exchange1_name} –º–∞—Ä–∫–µ—Ç –æ—à–∏–±–∫–∞: {result1}')
        else:
            logger.info(f'‚úÖ {self.exchange1_name} –∑–∞–∫—Ä—ã—Ç')

        if isinstance(result2, Exception):
            logger.error(f'‚ùå {self.exchange2_name} –º–∞—Ä–∫–µ—Ç –æ—à–∏–±–∫–∞: {result2}')
        else:
            logger.info(f'‚úÖ {self.exchange2_name} –∑–∞–∫—Ä—ã—Ç')

        return not (isinstance(result1, Exception) or isinstance(result2, Exception))

    async def close_positions_aggressive(self, qty1: float, qty2: float,
                                         direction1: str = "short", direction2: str = "long"):
        """
        –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: –ª–∏–º–∏—Ç—ã —Å —Ç–∞–π–º-–∞—É—Ç–æ–º ‚Üí –º–∞—Ä–∫–µ—Ç—ã

        Args:
            qty1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
            qty2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
            direction1: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
            direction2: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ
        """
        logger.info(f'üéØ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï: {qty1} {direction1} | {qty2} {direction2}')

        # –≠–¢–ê–ü 1: –ü—Ä–æ–±—É–µ–º –ª–∏–º–∏—Ç—ã (3 —Å–µ–∫—É–Ω–¥—ã)
        logger.info("üîÑ –≠—Ç–∞–ø 1: –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏
        firstOrderbook, secondOrderbook = await asyncio.gather(
            self.exchange1_info.get_orderbook(symbol=self.asset),
            self.exchange2_info.get_orderbook(symbol=self.asset)
        )

        if firstOrderbook.get('bids') and secondOrderbook.get('asks'):
            # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º
            price1 = float(firstOrderbook['asks'][0][0]) if direction1 == "long" else float(
                firstOrderbook['bids'][0][0])
            price2 = float(secondOrderbook['bids'][0][0]) if direction2 == "short" else float(
                secondOrderbook['asks'][0][0])

            start_time = time.time()
            frstOrdr, scndOrdr = await asyncio.gather(
                self.exchange1_ws.close_limit_order(self.asset, direction1, price1, qty1),
                self.exchange2_ws.close_limit_order(self.asset, direction2, price2, qty2),
                return_exceptions=True
            )

            if not (isinstance(frstOrdr, Exception) or isinstance(scndOrdr, Exception)):
                # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è 3 —Å–µ–∫—É–Ω–¥—ã
                while time.time() - start_time < 3.0:
                    fill1, fill2 = await self._check_fills(frstOrdr, scndOrdr)

                    if fill1 >= qty1 * 0.99 and fill2 >= qty2 * 0.99:
                        logger.info("‚úÖ –õ–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω—ã!")
                        return True

                    await asyncio.sleep(0.2)

                # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                logger.info("‚è∞ –õ–∏–º–∏—Ç—ã –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª–∏—Å—å, –æ—Ç–º–µ–Ω—è–µ–º")
                await asyncio.gather(
                    self._cancel_order_safe(self.exchange1_ws, frstOrdr['orderId']),
                    self._cancel_order_safe(self.exchange2_ws, scndOrdr['orderId']),
                    return_exceptions=True
                )

        # –≠–¢–ê–ü 2: –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞
        logger.info("üí• –≠—Ç–∞–ø 2: –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞")
        return await self.close_positions_market(qty1, qty2, direction1, direction2)

    async def close_single_exchange(self, exchange_ws, exchange_name: str,
                                    qty: float, direction: str):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–π –±–∏—Ä–∂–µ

        Args:
            exchange_ws: WebSocket –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
            exchange_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        logger.info(f'üéØ –ó–∞–∫—Ä—ã—Ç–∏–µ {exchange_name}: {qty} {direction}')

        try:
            result = await exchange_ws.close_market_order(self.asset, direction, qty)
            logger.info(f'‚úÖ {exchange_name} –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {result}')
            return True
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {exchange_name}: {e}')
            return False

    async def emergency_close_all(self):
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞–º–∏
        """
        logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô!")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
            pos1 = await self.exchange1_ws.get_position_size(self.asset, "long")
            pos2 = await self.exchange1_ws.get_position_size(self.asset, "short")
            pos3 = await self.exchange2_ws.get_position_size(self.asset, "long")
            pos4 = await self.exchange2_ws.get_position_size(self.asset, "short")

            tasks = []

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if pos1 > 0:
                tasks.append(self.exchange1_ws.close_market_order(self.asset, "short", pos1))
            if pos2 > 0:
                tasks.append(self.exchange1_ws.close_market_order(self.asset, "long", pos2))
            if pos3 > 0:
                tasks.append(self.exchange2_ws.close_market_order(self.asset, "short", pos3))
            if pos4 > 0:
                tasks.append(self.exchange2_ws.close_market_order(self.asset, "long", pos4))

            if tasks:
                results = await asyncio.gather(*tasks, return_exceptions=True)
                logger.info(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(tasks)} –æ—Ä–¥–µ—Ä–æ–≤")
                return True
            else:
                logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return False

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    async def _wait_for_fill(self, order1, order2, target_qty1: float, target_qty2: float):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        start_time = time.time()

        while time.time() - start_time < 10.0:  # 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            fill1, fill2 = await self._check_fills(order1, order2)

            if fill1 >= target_qty1 * 0.99 and fill2 >= target_qty2 * 0.99:
                return True

            await asyncio.sleep(0.3)

        return False

    async def _check_fills(self, order1, order2):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            status1, status2 = await asyncio.gather(
                self.exchange1_info.get_order_status(order1['orderId']),
                self.exchange2_info.get_order_status(order2['orderId']),
                return_exceptions=True
            )

            fill1 = float(status1.get('fillSz', 0)) if not isinstance(status1, Exception) else 0
            fill2 = float(status2.get('fillSz', 0)) if not isinstance(status2, Exception) else 0

            return fill1, fill2
        except:
            return 0, 0

    async def _cancel_order_safe(self, exchange_ws, order_id: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        try:
            await exchange_ws.cancel_order(self.asset, order_id)
        except Exception as e:
            logger.debug(f"–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")


# === –§–ê–ë–†–ò–ö–ê –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–†–´–í–ê–¢–ï–õ–Ø ===

async def create_position_closer(exchange1_name: str, exchange2_name: str,
                                 asset: str, config_path: str):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PositionCloser —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

    Args:
        exchange1_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–∏
        exchange2_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–∏
        asset: –¢–æ—Ä–≥–æ–≤—ã–π –∞–∫—Ç–∏–≤
        config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É

    Returns:
        PositionCloser: –ì–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç–µ–ª—å –ø–æ–∑–∏—Ü–∏–π
    """
    from DragonflyDb.DragonFlyConnector import DragonFlyConnector
    from InfoClients.AsyncBinanceInfoClient import AsyncBinanceInfoClient
    from InfoClients.AsyncHyperliquidInfoClient import AsyncHyperliquidInfoClient
    from CexWsClients.AsyncBinanceWSClient import AsyncBinanceWSClient
    from CexWsClients.AsyncHyperliquidWSClient import AsyncHyperliquidWSClient
    import json

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    with open(config_path, 'r') as f:
        config = json.load(f)

    # –°–æ–∑–¥–∞–µ–º DB –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã
    db1 = DragonFlyConnector(exchange=exchange1_name.lower())
    db2 = DragonFlyConnector(exchange=exchange2_name.lower())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    if exchange1_name == "Binance":
        ws1 = AsyncBinanceWSClient(
            config["api_keys"]["binance"]["api_key"],
            config["api_keys"]["binance"]["api_secret"]
        )
        info1 = AsyncBinanceInfoClient(db1)
        await ws1.connect_ws()

    elif exchange1_name == "Hyperliquid":
        ws1 = AsyncHyperliquidWSClient.from_key(
            config["api_keys"]["hyperliquid"]["api_key"]
        )
        info1 = AsyncHyperliquidInfoClient(db1)
        await ws1.connect_ws()

    if exchange2_name == "Binance":
        ws2 = AsyncBinanceWSClient(
            config["api_keys"]["binance"]["api_key"],
            config["api_keys"]["binance"]["api_secret"]
        )
        info2 = AsyncBinanceInfoClient(db2)
        await ws2.connect_ws()

    elif exchange2_name == "Hyperliquid":
        ws2 = AsyncHyperliquidWSClient.from_key(
            config["api_keys"]["hyperliquid"]["api_key"]
        )
        info2 = AsyncHyperliquidInfoClient(db2)
        await ws2.connect_ws()

    return PositionCloser(
        ws1, info1, ws2, info2,
        exchange1_name, exchange2_name, asset, config
    )
