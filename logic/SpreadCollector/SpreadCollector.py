#!/usr/bin/env python3
"""
SpreadCollector.py - –£—Å—Ç–æ–π—á–∏–≤—ã–π —Å–±–æ—Ä—â–∏–∫ —Å–ø—Ä–µ–¥–æ–≤
–í–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
"""

import asyncio
import json
import csv
import time
import signal
import logging
from datetime import datetime
from typing import List, Dict, Optional
import redis.asyncio as aioredis

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
current_file = os.path.abspath(__file__)
print(f"–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {current_file}")

# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –¥–æ –∫–æ—Ä–Ω—è jekius_maximus
root_path = os.path.dirname(os.path.dirname(os.path.dirname(current_file)))
print(f"–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {root_path}")

if root_path not in sys.path:
    sys.path.insert(0, root_path)
    print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å: {root_path}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ CexWsClients —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cex_path = os.path.join(root_path, "CexWsClients")
print(f"–ü–∞–ø–∫–∞ CexWsClients: {cex_path} - {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if os.path.exists(cex_path) else '–ù–ï –ù–ê–ô–î–ï–ù–ê'}")

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏
logging.getLogger().setLevel(logging.WARNING)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
stop_flag = False
CONFIG_PATH = r"C:/Users/strel/PycharmProjects/rn_need_projects/jekius_maximus/logic/config.json"


def signal_handler(sig, frame):
    global stop_flag
    print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    stop_flag = True


signal.signal(signal.SIGINT, signal_handler)


class SpreadCollector:
    """–ë—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ —Å–ø—Ä–µ–¥–æ–≤"""

    def __init__(self, config_path: str = CONFIG_PATH):
        self.config_path = config_path
        self.redis = None
        self.binance_ws = None
        self.hyper_ws = None
        self.ws_task = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            # Redis
            self.redis = aioredis.Redis(
                host='localhost', port=6379, password='strongpassword',
                decode_responses=True, socket_connect_timeout=5
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
            await self.redis.ping()
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # WebSocket –∫–ª–∏–µ–Ω—Ç—ã
            with open(self.config_path) as f:
                cfg = json.load(f)

            from CexWsClients.AsyncBinanceWSClient import AsyncBinanceWSClient
            from CexWsClients.AsyncHyperliquidWSClient import AsyncHyperliquidWSClient

            self.binance_ws = AsyncBinanceWSClient(
                cfg["api_keys"]["binance"]["api_key"],
                cfg["api_keys"]["binance"]["api_secret"]
            )
            self.hyper_ws = AsyncHyperliquidWSClient.from_key(
                cfg["api_keys"]["hyperliquid"]["api_key"]
            )

            print("‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def start_websockets(self, coins: List[str]):
        """–ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è {len(coins)} –º–æ–Ω–µ—Ç...")

        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await asyncio.gather(
                self.binance_ws.connect_ws(),
                self.hyper_ws.connect_ws()
            )

            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –º–æ–Ω–µ—Ç—ã
            subscribe_tasks = []
            for coin in coins:
                subscribe_tasks.extend([
                    self.binance_ws.subscribe_orderbook(coin),
                    self.hyper_ws.subscribe_orderbook(coin)
                ])

            await asyncio.gather(*subscribe_tasks, return_exceptions=True)
            print(f"‚úÖ WebSocket –≥–æ—Ç–æ–≤ –¥–ª—è {coins}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")
            raise

    async def collect_spread_data(self, coin: str, duration: int = 300, interval: float = 0.33) -> List[Dict]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã - –£–°–¢–û–ô–ß–ò–í–ê–Ø –í–ï–†–°–ò–Ø"""
        data = []
        start_time = time.time()
        last_progress = start_time
        last_save = start_time
        error_count = 0
        successful_reads = 0

        print(f"üìä {coin}: —Å–±–æ—Ä —Å–ø—Ä–µ–¥–æ–≤ –Ω–∞ {duration}—Å...")

        while not stop_flag and (time.time() - start_time) < duration:
            try:
                # –ë—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω –æ—Ä–¥–µ—Ä–±—É–∫–∞
                keys = [
                    f"orderbook:binance:{coin}USDT:bids",
                    f"orderbook:binance:{coin}USDT:asks",
                    f"orderbook:hyperliquid:{coin}:bids",
                    f"orderbook:hyperliquid:{coin}:asks"
                ]

                values = await asyncio.gather(
                    *[asyncio.wait_for(self.redis.get(k), timeout=0.5) for k in keys],
                    return_exceptions=True
                )

                if all(isinstance(v, str) and v for v in values):
                    try:
                        # –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω
                        bids_b, asks_b, bids_h, asks_h = [json.loads(v) for v in values]

                        if all([bids_b, asks_b, bids_h, asks_h]) and all(
                                len(x) > 0 for x in [bids_b, asks_b, bids_h, asks_h]):
                            # –¶–µ–Ω—ã
                            b_bid, b_ask = float(bids_b[0][0]), float(asks_b[0][0])
                            h_bid, h_ask = float(bids_h[0][0]), float(asks_h[0][0])

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã —Ä–∞–∑—É–º–Ω—ã–µ
                            if all(price > 0 for price in [b_bid, b_ask, h_bid, h_ask]):
                                # –°–ø—Ä–µ–¥—ã –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
                                spread_b_short = ((b_bid / h_ask) - 1) * 100  # Binance –ø—Ä–æ–¥–∞—Ç—å, Hyper –∫—É–ø–∏—Ç—å
                                spread_h_short = ((h_bid / b_ask) - 1) * 100  # Hyper –ø—Ä–æ–¥–∞—Ç—å, Binance –∫—É–ø–∏—Ç—å

                                best_spread = max(spread_b_short, spread_h_short)
                                direction = "binance_short" if spread_b_short > spread_h_short else "hyper_short"

                                data.append({
                                    'time': datetime.now().isoformat(),
                                    'elapsed': round(time.time() - start_time, 1),
                                    'coin': coin,
                                    'b_bid': b_bid, 'b_ask': b_ask,
                                    'h_bid': h_bid, 'h_ask': h_ask,
                                    'spread_b_short': round(spread_b_short, 4),
                                    'spread_h_short': round(spread_h_short, 4),
                                    'best_spread': round(best_spread, 4),
                                    'direction': direction
                                })

                                successful_reads += 1
                                error_count = max(0, error_count - 1)  # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

                    except (json.JSONDecodeError, IndexError, KeyError, ValueError, TypeError, ZeroDivisionError) as e:
                        error_count += 1
                        if error_count % 50 == 0:
                            print(f"‚ö†Ô∏è {coin}: –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: {error_count} (–ø–æ—Å–ª–µ–¥–Ω—è—è: {type(e).__name__})")

                else:
                    # –ü—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    error_count += 1

                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
                if time.time() - last_progress > 30:
                    success_rate = (successful_reads / (successful_reads + error_count)) * 100 if (
                                                                                                              successful_reads + error_count) > 0 else 0
                    print(f"‚úÖ {coin}: {len(data)} –∑–∞–ø–∏—Å–µ–π | –£—Å–ø–µ—Ö: {success_rate:.1f}% | –û—à–∏–±–æ–∫: {error_count}")
                    last_progress = time.time()

                # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                if time.time() - last_save > 60 and len(data) > 0:
                    await self._save_temp_data(coin, data)
                    last_save = time.time()

            except Exception as e:
                error_count += 1
                if error_count % 100 == 0:
                    print(f"‚ö†Ô∏è {coin}: –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫: {error_count} - {type(e).__name__}: {str(e)[:100]}")

            await asyncio.sleep(interval)

        print(f"üíæ {coin}: —Å–æ–±—Ä–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π (—É—Å–ø–µ—à–Ω—ã—Ö: {successful_reads}, –æ—à–∏–±–æ–∫: {error_count})")
        return data

    async def _save_temp_data(self, coin: str, data: List[Dict]):
        """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            temp_filename = f"temp_spread_{coin}_{datetime.now():%H%M%S}.csv"
            with open(temp_filename, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=data[0].keys())
                writer.writeheader()
                writer.writerows(data)
            print(f"üíæ {coin}: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {temp_filename}")
        except Exception as e:
            print(f"‚ùå {coin}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def save_data(self, coin: str, data: List[Dict]) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        if not data:
            return ""

        try:
            filename = f"spread_{coin}_{datetime.now():%Y%m%d_%H%M%S}.csv"

            with open(filename, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=data[0].keys())
                writer.writeheader()
                writer.writerows(data)

            print(f"‚úÖ {coin}: –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            return filename

        except Exception as e:
            print(f"‚ùå {coin}: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return ""

    async def collect_single_coin(self, coin: str, duration: int = 300, interval: float = 0.33):
        """–°–±–æ—Ä –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        try:
            await self.initialize()
            await self.start_websockets([coin])
            await asyncio.sleep(5)  # –ñ–¥–µ–º –¥–∞–Ω–Ω—ã—Ö

            data = await self.collect_spread_data(coin, duration, interval)
            filename = self.save_data(coin, data)

            if data:
                spreads = [d['best_spread'] for d in data]
                print(f"\nüìä {coin} –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"‚îú‚îÄ –ó–∞–ø–∏—Å–µ–π: {len(data)}")
                print(f"‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {sum(spreads) / len(spreads):.4f}%")
                print(f"‚îú‚îÄ –õ—É—á—à–∏–π —Å–ø—Ä–µ–¥: {max(spreads):.4f}%")
                print(f"‚îú‚îÄ –•—É–¥—à–∏–π —Å–ø—Ä–µ–¥: {min(spreads):.4f}%")
                print(f"‚îî‚îÄ –§–∞–π–ª: {filename}")
            else:
                print(f"‚ùå {coin}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {coin}: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await self.cleanup()

    async def collect_multi_coins(self, coins: List[str], duration: int = 300, interval: float = 0.33):
        """–°–±–æ—Ä –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–Ω–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        try:
            await self.initialize()
            await self.start_websockets(coins)
            await asyncio.sleep(10)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–ª—è {len(coins)} –º–æ–Ω–µ—Ç...")
            tasks = [self.collect_spread_data(coin, duration, interval) for coin in coins]
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            files = []
            successful_coins = []

            for coin, data in zip(coins, results):
                if isinstance(data, Exception):
                    print(f"‚ùå {coin}: –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ - {type(data).__name__}: {data}")
                    continue

                filename = self.save_data(coin, data)
                if filename:
                    files.append(filename)
                    successful_coins.append((coin, data))

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\n{'=' * 70}")
            print(f"üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({len(successful_coins)}/{len(coins)} –º–æ–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ):")
            print(f"{'=' * 70}")
            print(f"{'–ú–æ–Ω–µ—Ç–∞':<8} {'–ó–∞–ø–∏—Å–µ–π':<8} {'–°—Ä–µ–¥–Ω–∏–π':<10} {'–õ—É—á—à–∏–π':<10} {'–•—É–¥—à–∏–π':<10} {'–§–∞–π–ª'}")
            print("-" * 70)

            for coin, data in successful_coins:
                if data:
                    spreads = [d['best_spread'] for d in data]
                    avg_spread = sum(spreads) / len(spreads)
                    max_spread = max(spreads)
                    min_spread = min(spreads)
                    filename = f"spread_{coin}_*.csv"
                    print(
                        f"{coin:<8} {len(data):<8} {avg_spread:<10.4f} {max_spread:<10.4f} {min_spread:<10.4f} {filename}")

            print(f"{'=' * 70}")
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if successful_coins:
                print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                best_coin = max(successful_coins, key=lambda x: max([d['best_spread'] for d in x[1]]))
                most_data = max(successful_coins, key=lambda x: len(x[1]))
                print(f"‚îú‚îÄ –õ—É—á—à–∏–π —Å–ø—Ä–µ–¥: {best_coin[0]} ({max([d['best_spread'] for d in best_coin[1]]):.4f}%)")
                print(f"‚îî‚îÄ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: {most_data[0]} ({len(most_data[1])} –∑–∞–ø–∏—Å–µ–π)")

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏-—Å–±–æ—Ä–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            print("üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

            if self.redis:
                await self.redis.close()
                print("‚úÖ Redis –∑–∞–∫—Ä—ã—Ç")

            if self.binance_ws:
                await self.binance_ws.close()
                print("‚úÖ Binance WS –∑–∞–∫—Ä—ã—Ç")

            if self.hyper_ws:
                await self.hyper_ws.close()
                print("‚úÖ Hyperliquid WS –∑–∞–∫—Ä—ã—Ç")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def collect_one(coin: str, duration: int = 300):
    """–°–±–æ—Ä –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    collector = SpreadCollector()
    await collector.collect_single_coin(coin.upper(), duration)


async def collect_many(coins: List[str], duration: int = 300):
    """–°–±–æ—Ä –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–Ω–µ—Ç"""
    collector = SpreadCollector()
    coins_upper = [c.upper() for c in coins]
    await collector.collect_multi_coins(coins_upper, duration)


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –º–æ–Ω–µ—Ç
POPULAR_COINS = ["ETH", "BTC", "SOL", "ARB", "DOGE"]
ALTCOINS = ["UMA", "HYPE", "SOPH", "SPX", "WCT"]
TRENDING_COINS = ["ZRO", "AIXBT", "BERA", "TRUMP"]

if __name__ == "__main__":
    import sys

    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    print("üöÄ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –°–ë–û–†–©–ò–ö –°–ü–†–ï–î–û–í v2.0")
    print("=" * 60)
    print("–£—Å—Ç–æ–π—á–∏–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º")
    print("=" * 60)

    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if len(sys.argv) > 1:
        if sys.argv[1] == "one":
            coin = sys.argv[2] if len(sys.argv) > 2 else "ETH"
            duration = int(sys.argv[3]) if len(sys.argv) > 3 else 300
            print(f"üìä –°–±–æ—Ä –¥–ª—è {coin} ({duration}—Å)")
            asyncio.run(collect_one(coin, duration))

        elif sys.argv[1] == "popular":
            duration = int(sys.argv[2]) if len(sys.argv) > 2 else 300
            print(f"üìä –°–±–æ—Ä –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç ({duration}—Å)")
            asyncio.run(collect_many(POPULAR_COINS, duration))

        elif sys.argv[1] == "altcoins":
            duration = int(sys.argv[2]) if len(sys.argv) > 2 else 300
            print(f"üìä –°–±–æ—Ä –¥–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ ({duration}—Å)")
            asyncio.run(collect_many(ALTCOINS, duration))

        elif sys.argv[1] == "trending":
            duration = int(sys.argv[2]) if len(sys.argv) > 2 else 300
            print(f"üìä –°–±–æ—Ä –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç ({duration}—Å)")
            asyncio.run(collect_many(TRENDING_COINS, duration))

        elif sys.argv[1] == "custom":
            coins = sys.argv[2].split(',')
            duration = int(sys.argv[3]) if len(sys.argv) > 3 else 300
            print(f"üìä –°–±–æ—Ä –¥–ª—è {coins} ({duration}—Å)")
            asyncio.run(collect_many(coins, duration))

        elif sys.argv[1] == "test":
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ 1 –º–∏–Ω—É—Ç—É
            coin = sys.argv[2] if len(sys.argv) > 2 else "ETH"
            print(f"üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è {coin} (60—Å)")
            asyncio.run(collect_one(coin, 60))

    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python SpreadCollector.py one ETH 300           # –û–¥–Ω–∞ –º–æ–Ω–µ—Ç–∞")
        print("  python SpreadCollector.py popular 300           # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã")
        print("  python SpreadCollector.py altcoins 300          # –ê–ª—å—Ç–∫–æ–∏–Ω—ã")
        print("  python SpreadCollector.py trending 300          # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ (ZRO,AIXBT,BERA,TRUMP)")
        print("  python SpreadCollector.py custom ETH,BTC,SOL 300 # –°–≤–æ–π —Å–ø–∏—Å–æ–∫")
        print("  python SpreadCollector.py test ETH              # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (60—Å)")
        print("\n–ó–∞–ø—É—Å–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ETH –Ω–∞ 5 –º–∏–Ω—É—Ç")
        asyncio.run(collect_one("ETH", 300))