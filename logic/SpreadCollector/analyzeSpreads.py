#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ø—Ä–µ–¥–æ–≤ - –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –Ω–∞ –∫–∞–∫–∏—Ö –º–æ–Ω–µ—Ç–∞—Ö –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import glob
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import warnings

warnings.filterwarnings('ignore')


class SpreadAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–ø—Ä–µ–¥–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.data = {}
        self.stats = {}

    def load_data(self, coin: str = None, pattern: str = "spread_*.csv") -> Dict[str, pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤"""
        if coin:
            pattern = f"spread_{coin}_*.csv"

        files = glob.glob(pattern)
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")

        for file in sorted(files):
            try:
                df = pd.read_csv(file)
                if 'coin' in df.columns:
                    coin_name = df['coin'].iloc[0]
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    coin_name = file.split('_')[1].split('.')[0]

                df['timestamp'] = pd.to_datetime(df['time'], errors='coerce')
                self.data[coin_name] = df
                print(f"‚úÖ {coin_name}: {len(df)} –∑–∞–ø–∏—Å–µ–π")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file}: {e}")

        return self.data

    def calculate_statistics(self) -> Dict:
        """–†–∞—Å—á–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print(f"\nüìä –ê–ù–ê–õ–ò–ó {len(self.data)} –ú–û–ù–ï–¢")
        print("=" * 80)

        results = {}

        for coin, df in self.data.items():
            if 'best_spread' in df.columns:
                spreads = df['best_spread'].values
            elif 'spread' in df.columns:
                spreads = df['spread'].values
            else:
                continue

            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = {
                'records': len(df),
                'duration_min': df['elapsed'].max() if 'elapsed' in df.columns else len(df) * 0.33 / 60,
                'mean': np.mean(spreads),
                'median': np.median(spreads),
                'std': np.std(spreads),
                'min': np.min(spreads),
                'max': np.max(spreads),
                'q10': np.percentile(spreads, 10),
                'q25': np.percentile(spreads, 25),
                'q75': np.percentile(spreads, 75),
                'q90': np.percentile(spreads, 90),
            }

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            stats['cv'] = stats['std'] / abs(stats['mean']) if stats['mean'] != 0 else 0  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
            stats['profitable_10_pct'] = len(spreads[spreads <= stats['q10']]) / len(spreads) * 100
            stats['profitable_25_pct'] = len(spreads[spreads <= stats['q25']]) / len(spreads) * 100
            stats['negative_spread_pct'] = len(spreads[spreads < 0]) / len(spreads) * 100

            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if 'direction' in df.columns:
                direction_counts = df['direction'].value_counts()
                if len(direction_counts) >= 2:
                    stats['binance_short_pct'] = (direction_counts.get('binance_short', 0) / len(df)) * 100
                    stats['hyper_short_pct'] = (direction_counts.get('hyper_short', 0) / len(df)) * 100
                    stats['preferred_direction'] = direction_counts.index[0]

            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            if len(spreads) > 100:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Å–º–æ—Ç—Ä–∏–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
                chunk_size = len(spreads) // 5
                chunk_means = []
                for i in range(5):
                    start_idx = i * chunk_size
                    end_idx = (i + 1) * chunk_size if i < 4 else len(spreads)
                    chunk_means.append(np.mean(spreads[start_idx:end_idx]))
                stats['temporal_stability'] = np.std(chunk_means)

            results[coin] = stats

        self.stats = results
        return results

    def print_summary_table(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.stats:
            self.calculate_statistics()

        print(
            f"\n{'–ú–û–ù–ï–¢–ê':<8} {'–ó–∞–ø–∏—Å–µ–π':<8} {'–°—Ä–µ–¥–Ω–∏–π':<10} {'–ú–∏–Ω':<8} {'–ú–∞–∫—Å':<8} {'Q10':<8} {'Q25':<8} {'CV':<6} {'–ù–µ–≥–∞—Ç%':<7}")
        print("-" * 85)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥)
        sorted_coins = sorted(self.stats.items(), key=lambda x: x[1]['mean'])

        for coin, stats in sorted_coins:
            print(f"{coin:<8} {stats['records']:<8} {stats['mean']:<10.4f} "
                  f"{stats['min']:<8.4f} {stats['max']:<8.4f} {stats['q10']:<8.4f} "
                  f"{stats['q25']:<8.4f} {stats['cv']:<6.2f} {stats['negative_spread_pct']:<7.1f}")

    def find_best_opportunities(self) -> Dict:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        if not self.stats:
            self.calculate_statistics()

        opportunities = {}

        for coin, stats in self.stats.items():
            # –°–∫–æ—Ä–∏–Ω–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            score = 0
            reasons = []

            # –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ = —Ö–æ—Ä–æ—à–æ
            if stats['mean'] < -0.1:
                score += 30
                reasons.append(f"–ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ ({stats['mean']:.4f}%)")

            # –ú–Ω–æ–≥–æ –≤—ã–≥–æ–¥–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
            if stats['profitable_25_pct'] > 40:
                score += 20
                reasons.append(f"–ß–∞—Å—Ç–æ –≤—ã–≥–æ–¥–Ω–æ ({stats['profitable_25_pct']:.1f}% –≤—Ä–µ–º–µ–Ω–∏)")

            # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            if stats['cv'] < 0.5:
                score += 15
                reasons.append(f"–°—Ç–∞–±–∏–ª—å–Ω—ã–π (CV={stats['cv']:.2f})")

            # –•–æ—Ä–æ—à–∏–π –º–∏–Ω–∏–º—É–º
            if stats['min'] < -0.5:
                score += 10
                reasons.append(f"–û—Ç–ª–∏—á–Ω—ã–π –º–∏–Ω–∏–º—É–º ({stats['min']:.4f}%)")

            # –ú–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö = –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
            if stats['records'] > 500:
                score += 5
                reasons.append(f"–ú–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö ({stats['records']})")

            opportunities[coin] = {
                'score': score,
                'reasons': reasons,
                'stats': stats
            }

        return opportunities

    def print_opportunities_ranking(self):
        """–†–µ–π—Ç–∏–Ω–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        opportunities = self.find_best_opportunities()

        print(f"\nüèÜ –†–ï–ô–¢–ò–ù–ì –¢–û–†–ì–û–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 60)

        sorted_opps = sorted(opportunities.items(), key=lambda x: x[1]['score'], reverse=True)

        for i, (coin, opp) in enumerate(sorted_opps, 1):
            print(f"\n{i}. {coin} (–û—á–∫–∏: {opp['score']})")
            print(f"   –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥: {opp['stats']['mean']:.4f}%")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: [{opp['stats']['min']:.4f}%, {opp['stats']['max']:.4f}%]")
            print(f"   –ü—Ä–∏—á–∏–Ω—ã:")
            for reason in opp['reasons']:
                print(f"     ‚Ä¢ {reason}")

    def analyze_entry_exit_levels(self, coin: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞"""
        if coin not in self.data:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin}")
            return {}

        df = self.data[coin]

        if 'best_spread' in df.columns:
            spreads = df['best_spread'].values
        elif 'spread' in df.columns:
            spreads = df['spread'].values
        else:
            return {}

        # –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π
        levels = {
            'very_profitable': np.percentile(spreads, 5),  # –¢–æ–ø 5% - –æ—Ç–ª–∏—á–Ω—ã–π –≤—Ö–æ–¥
            'profitable': np.percentile(spreads, 15),  # –¢–æ–ø 15% - —Ö–æ—Ä–æ—à–∏–π –≤—Ö–æ–¥
            'break_even': np.percentile(spreads, 50),  # –ú–µ–¥–∏–∞–Ω–∞
            'loss_exit': np.percentile(spreads, 85),  # 85% - –ø–æ—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç—å
            'stop_loss': np.percentile(spreads, 95),  # 95% - —Å—Ç–æ–ø-–ª–æ—Å—Å
        }

        # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∑–æ–Ω—ã
        zones = {
            'very_profitable_freq': len(spreads[spreads <= levels['very_profitable']]) / len(spreads) * 100,
            'profitable_freq': len(spreads[spreads <= levels['profitable']]) / len(spreads) * 100,
            'loss_zone_freq': len(spreads[spreads >= levels['loss_exit']]) / len(spreads) * 100,
        }

        print(f"\nüìä –ê–ù–ê–õ–ò–ó –£–†–û–í–ù–ï–ô: {coin}")
        print("-" * 40)
        print(f"–û—Ç–ª–∏—á–Ω—ã–π –≤—Ö–æ–¥:  {levels['very_profitable']:.4f}% (–ø–æ–ø–∞–¥–∞–Ω–∏–µ {zones['very_profitable_freq']:.1f}%)")
        print(f"–•–æ—Ä–æ—à–∏–π –≤—Ö–æ–¥:   {levels['profitable']:.4f}% (–ø–æ–ø–∞–¥–∞–Ω–∏–µ {zones['profitable_freq']:.1f}%)")
        print(f"–ë–µ–∑—É–±—ã—Ç–æ–∫:      {levels['break_even']:.4f}%")
        print(f"–ü–æ—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç—å:  {levels['loss_exit']:.4f}% (–ø–æ–ø–∞–¥–∞–Ω–∏–µ {zones['loss_zone_freq']:.1f}%)")
        print(f"–°—Ç–æ–ø-–ª–æ—Å—Å:      {levels['stop_loss']:.4f}%")

        return {**levels, **zones}

    def create_visual_analysis(self, coins: List[str] = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        if not coins:
            coins = list(self.data.keys())[:6]  # –ú–∞–∫—Å–∏–º—É–º 6 –º–æ–Ω–µ—Ç

        plt.style.use('dark_background')
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–µ–¥–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π', fontsize=16)

        # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        ax1 = axes[0, 0]
        colors = ['cyan', 'magenta', 'yellow', 'lime', 'orange', 'red']

        for i, coin in enumerate(coins):
            if coin in self.data:
                df = self.data[coin]
                spreads = df['best_spread'] if 'best_spread' in df.columns else df['spread']
                ax1.hist(spreads, alpha=0.6, bins=30, label=coin, color=colors[i % len(colors)])

        ax1.set_xlabel('–°–ø—Ä–µ–¥ (%)')
        ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–æ–≤')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # –ì—Ä–∞—Ñ–∏–∫ 2: Box plot —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        ax2 = axes[0, 1]
        box_data = []
        box_labels = []

        for coin in coins:
            if coin in self.data:
                df = self.data[coin]
                spreads = df['best_spread'] if 'best_spread' in df.columns else df['spread']
                box_data.append(spreads)
                box_labels.append(coin)

        ax2.boxplot(box_data, labels=box_labels)
        ax2.set_ylabel('–°–ø—Ä–µ–¥ (%)')
        ax2.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤')
        ax2.grid(True, alpha=0.3)

        # –ì—Ä–∞—Ñ–∏–∫ 3: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
        ax3 = axes[1, 0]

        for i, coin in enumerate(coins):
            if coin in self.data:
                df = self.data[coin]
                if 'elapsed' in df.columns:
                    spreads = df['best_spread'] if 'best_spread' in df.columns else df['spread']
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é 10-—é —Ç–æ—á–∫—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    sample_idx = np.arange(0, len(df), max(1, len(df) // 100))
                    ax3.plot(df['elapsed'].iloc[sample_idx], spreads.iloc[sample_idx],
                             label=coin, color=colors[i % len(colors)], alpha=0.8)

        ax3.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
        ax3.set_ylabel('–°–ø—Ä–µ–¥ (%)')
        ax3.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
        ax3.legend()
        ax3.grid(True, alpha=0.3)

        # –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        ax4 = axes[1, 1]

        if self.stats:
            coins_stats = [(coin, stats) for coin, stats in self.stats.items() if coin in coins]
            coin_names = [item[0] for item in coins_stats]
            q10_values = [item[1]['q10'] for item in coins_stats]
            negative_pcts = [item[1]['negative_spread_pct'] for item in coins_stats]

            x = np.arange(len(coin_names))
            width = 0.35

            ax4_twin = ax4.twinx()

            bars1 = ax4.bar(x - width / 2, q10_values, width, label='Q10 —Å–ø—Ä–µ–¥', color='cyan', alpha=0.7)
            bars2 = ax4_twin.bar(x + width / 2, negative_pcts, width, label='% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö', color='magenta',
                                 alpha=0.7)

            ax4.set_xlabel('–ú–æ–Ω–µ—Ç–∞')
            ax4.set_ylabel('Q10 —Å–ø—Ä–µ–¥ (%)', color='cyan')
            ax4_twin.set_ylabel('% –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø—Ä–µ–¥–æ–≤', color='magenta')
            ax4.set_title('–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
            ax4.set_xticks(x)
            ax4.set_xticklabels(coin_names)
            ax4.grid(True, alpha=0.3)

        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"spread_analysis_{timestamp}.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.show()

        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

    def compare_directions(self, coin: str):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if coin not in self.data:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {coin}")
            return

        df = self.data[coin]

        if 'direction' not in df.columns:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –¥–ª—è {coin}")
            return

        print(f"\nüîÑ –ê–ù–ê–õ–ò–ó –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô: {coin}")
        print("-" * 40)

        for direction in df['direction'].unique():
            subset = df[df['direction'] == direction]
            spreads = subset['best_spread'] if 'best_spread' in subset.columns else subset['spread']

            print(f"\n{direction.upper()}:")
            print(f"  –ó–∞–ø–∏—Å–µ–π: {len(subset)}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π: {spreads.mean():.4f}%")
            print(f"  –õ—É—á—à–∏–π:  {spreads.min():.4f}%")
            print(f"  Q10:     {np.percentile(spreads, 10):.4f}%")
            print(f"  Q25:     {np.percentile(spreads, 25):.4f}%")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = SpreadAnalyzer()

    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ü–†–ï–î–û–í")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = analyzer.load_data()

    if not data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ –µ—Å—Ç—å —Ñ–∞–π–ª—ã spread_*.csv")
        return

    while True:
        print(f"\nüìã –ú–ï–ù–Æ –ê–ù–ê–õ–ò–ó–ê:")
        print("1. –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
        print("2. –†–µ–π—Ç–∏–Ω–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
        print("3. –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞")
        print("4. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print("5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        print("6. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("0. –í—ã—Ö–æ–¥")

        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if choice == "0":
                break
            elif choice == "1":
                analyzer.print_summary_table()
            elif choice == "2":
                analyzer.print_opportunities_ranking()
            elif choice == "3":
                coin = input("–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—É: ").upper()
                analyzer.analyze_entry_exit_levels(coin)
            elif choice == "4":
                coins_input = input("–ú–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞): ").strip()
                coins = [c.strip().upper() for c in coins_input.split(',')] if coins_input else None
                analyzer.create_visual_analysis(coins)
            elif choice == "5":
                coin = input("–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—É: ").upper()
                analyzer.compare_directions(coin)
            elif choice == "6":
                analyzer.calculate_statistics()

        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()