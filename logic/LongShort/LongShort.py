import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional, Tuple
import asyncio
import json
import os

from DragonflyDb.DragonFlyConnector import DragonFlyConnector
from InfoClients.AsyncBinanceInfoClient import AsyncBinanceInfoClient
from InfoClients.AsyncHyperliquidInfoClient import AsyncHyperliquidInfoClient
from config.config import CLIENTS as WS_CLIENTS
from CexClients.AsyncBinanceClient import AsyncBinanceClient
from CexClients.AsyncOKXClient import AsyncOKXClient
from CexClients.AsyncBybitClient import AsyncBybitClient
from CexClients.AsyncHyperliquidClient import AsyncHyperliquidClient

from CexWsClients.AsyncOKXWSClient import AsyncOKXWSClient
from CexWsClients.AsyncBinanceWSClient import AsyncBinanceWSClient
from CexWsClients.AsyncBybitWSClient import AsyncBybitWSClient
from CexWsClients.AsyncHyperliquidWSClient import AsyncHyperliquidWSClient
from eth_account.signers.local import LocalAccount
from eth_account.account import Account

logger = logging.getLogger(__name__)


def get_decimal_places(price: float) -> int:
    price_str = str(price)
    return len(price_str.split('.')[1]) if '.' in price_str else 0


def round_to_decimals(value: float, decimals: int) -> float:
    return round(value, decimals)


def adjust_quantity(deal_qty, constraints):
    min_quantity = float(constraints['min_quantity'])
    lot_size = float(constraints['lot_size'])

    rounded_quantity = round(deal_qty / lot_size) * lot_size
    adjusted_quantity = max(rounded_quantity, min_quantity)
    return int(adjusted_quantity)


async def init_exchange_client(exchange_name: str, config: dict, asset: str, db):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—é–±–æ–≥–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞

    Args:
        exchange_name: "Binance" –∏–ª–∏ "Hyperliquid"
        config: –∫–æ–Ω—Ñ–∏–≥ —Å api –∫–ª—é—á–∞–º–∏
        asset: —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫—Ç–∏–≤
        db: –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Returns:
        (ws_client, info_client) - –≥–æ—Ç–æ–≤—ã–µ –∫ —Ä–∞–±–æ—Ç–µ –∫–ª–∏–µ–Ω—Ç—ã
    """
    print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {exchange_name}...")

    if exchange_name == "Binance":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        ws_client = AsyncBinanceWSClient(
            config["api_keys"]["binance"]["api_key"],
            config["api_keys"]["binance"]["api_secret"]
        )
        info_client = AsyncBinanceInfoClient(db)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
        await ws_client.connect_ws()
        await ws_client.subscribe_orderbook(asset)

    elif exchange_name == "Hyperliquid":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        ws_client = AsyncHyperliquidWSClient.from_key(
            config["api_keys"]["hyperliquid"]["api_key"]
        )
        info_client = AsyncHyperliquidInfoClient(db)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
        await ws_client.connect_ws()
        await ws_client.subscribe_orderbook(asset)

    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±–º–µ–Ω–Ω–∏–∫: {exchange_name}")

    print(f"‚úÖ {exchange_name} –≥–æ—Ç–æ–≤")
    return ws_client, info_client


class LongShort:
    def __init__(self, exchange1_name: Any, exchange2_name: Any, reverse: bool, asset: str,
                 config_path: str = r"C:/Users/strel/PycharmProjects/rn_need_projects/jekius_maximus/logic/config.json"):
        self.exchange1_name = exchange1_name
        self.exchange2_name = exchange2_name
        self.exchange1_client = None
        self.exchange2_client = None
        self.reverse = reverse
        self.asset = asset
        if not os.path.exists(config_path):
            logger.error(f"Config file {config_path} not found")
            raise FileNotFoundError(f"Config file {config_path} not found")
        with open(config_path, 'r') as config_file:
            self.config = json.load(config_file)
        self.exchange1_funding_pnl = 0.0
        self.exchange2_funding_pnl = 0.0
        self.exchange2_funding_count = 0
        self.max_exchange2_funding = 1
        self.final_funding_done = False
        self.prcDcmls1 = None
        self.prcDcmls2 = None
        self.qtyDcmls1 = None
        self.qtyDcmls2 = None
        self.frstDrctn = "long"
        self.scndDrctn = "short"
        self.dealqty = self.config['trading_parameters']['margin'] * self.config['trading_parameters']['leverage'] / \
                       self.config['trading_parameters']['parts']
        self.credited_tokens1 = 0
        self.credited_tokens2 = 0

    async def before_start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        await self._init_exchange_clients()
        await self._setup_trading_parameters()

    async def _init_exchange_clients(self):
        """–ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        # –§–ò–ö–°: —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ DB –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        db1 = DragonFlyConnector(exchange=self.exchange1_name.lower())  # "binance"
        db2 = DragonFlyConnector(exchange=self.exchange2_name.lower())  # "hyperliquid"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –æ–±–º–µ–Ω–Ω–∏–∫ —Å –µ–≥–æ DB
        self.exchange1WebSocket, self.exchange1Info = await init_exchange_client(
            self.exchange1_name, self.config, self.asset, db1
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ —Å –µ–≥–æ DB
        self.exchange2WebSocket, self.exchange2Info = await init_exchange_client(
            self.exchange2_name, self.config, self.asset, db2
        )

        # –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤...")
        await asyncio.sleep(3)
        await self._wait_for_orderbook()
        print("üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ!")

    async def _wait_for_orderbook(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—Ä–¥–µ—Ä–±—É–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ"""
        for attempt in range(5):
            try:
                ob1, ob2 = await asyncio.gather(
                    self.exchange1Info.get_orderbook(self.asset),
                    self.exchange2Info.get_orderbook(self.asset)
                )

                if (ob1.get('bids', []) and ob2.get('asks', [])):
                    logger.info("‚úÖ –û—Ä–¥–µ—Ä–±—É–∫–∏ –≥–æ—Ç–æ–≤—ã")
                    return True

            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º

            await asyncio.sleep(1)

        raise Exception("–û—Ä–¥–µ—Ä–±—É–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏—Å—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥")

    def _create_websocket_client(self, exchange_name: str):
        key = exchange_name.lower()
        if key not in WS_CLIENTS:
            raise ValueError(f"WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è '{exchange_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py")
        return WS_CLIENTS[key]

    def _create_info_client(self, exchange_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞"""
        db = DragonFlyConnector(exchange="binance")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –±–∞–∑—É
        if exchange_name == "Binance":
            return AsyncBinanceInfoClient(db)
        elif exchange_name == "Hyperliquid":
            return AsyncHyperliquidInfoClient(db)
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±–º–µ–Ω–Ω–∏–∫: {exchange_name}")

    async def _setup_trading_parameters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–µ–∏—Ö –±–∏—Ä–∂"""
        # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –≤ USD
        base_usd_amount = self._calculate_base_quantity()

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        ob1 = await self.exchange1Info.get_orderbook(self.asset)
        ob2 = await self.exchange2Info.get_orderbook(self.asset)

        if not (ob1.get('asks') and ob2.get('asks')):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤")

        # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        avg_price = (float(ob1['asks'][0][0]) + float(ob2['asks'][0][0])) / 2

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
        base_quantity = base_usd_amount / avg_price

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º precision –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        await self._setup_exchange_quantity(base_quantity, is_first=True)
        await self._setup_exchange_quantity(base_quantity, is_second=True)

        logger.info(f"üí∞ –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${base_usd_amount:.2f} | ~{base_quantity:.6f} {self.asset}")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä—ã: {self.exchange1_name}={self.dealqty1} | {self.exchange2_name}={self.dealqty2}")

    async def _setup_exchange_quantity(self, base_quantity: float, is_first: bool = False, is_second: bool = False):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏ —Å —É—á–µ—Ç–æ–º precision"""

        if is_first:
            exchange_name = self.exchange1_name
            websocket = self.exchange1WebSocket
        else:
            exchange_name = self.exchange2_name
            websocket = self.exchange2WebSocket

        if exchange_name == "Binance":
            # –î–ª—è Binance –ø–æ–ª—É—á–∞–µ–º precision
            symbol_info = await websocket.get_symbol_info(self.asset)
            qty_precision = symbol_info['quantityPrecision']
            final_qty = round(base_quantity, qty_precision)

        elif exchange_name == "Hyperliquid":
            # –î–ª—è Hyperliquid –ø–æ–ª—É—á–∞–µ–º precision
            symbol_info = await websocket.get_symbol_info(self.asset)
            qty_precision = symbol_info['quantityPrecision']
            final_qty = round(base_quantity, qty_precision)

        else:
            final_qty = round(base_quantity, 6)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 6 –∑–Ω–∞–∫–æ–≤

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if is_first:
            self.dealqty1 = final_qty
        else:
            self.dealqty2 = final_qty

        # –í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏
        if hasattr(self, 'dealqty1') and hasattr(self, 'dealqty2'):
            # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π precision –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            min_precision = min(
                len(str(self.dealqty1).split('.')[-1]) if '.' in str(self.dealqty1) else 0,
                len(str(self.dealqty2).split('.')[-1]) if '.' in str(self.dealqty2) else 0
            )
            sync_qty = round(min(self.dealqty1, self.dealqty2), min_precision)
            self.dealqty1 = sync_qty
            self.dealqty2 = sync_qty

    def _calculate_base_quantity(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return (self.config['trading_parameters']['margin'] *
                self.config['trading_parameters']['leverage'] /
                self.config['trading_parameters']['parts'])

    async def verify_and_balance_positions(self, current_step: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        Args:
            current_step: —Ç–µ–∫—É—â–∏–π —à–∞–≥ (—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π —É–∂–µ –Ω–∞–±—Ä–∞–Ω–æ)
        """
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ —à–∞–≥–∞ {current_step}")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
            position1 = await self.exchange1WebSocket.get_position_size(self.asset, self.frstDrctn)
            position2 = await self.exchange2WebSocket.get_position_size(self.asset, self.scndDrctn)

            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            pos1_float = self._safe_float(position1)
            pos2_float = self._safe_float(position2)

            # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
            expected_size = self.dealqty1 * current_step  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–±—Ä–∞–Ω–æ

            logger.info(f"üìä –ü–æ–∑–∏—Ü–∏–∏: {self.exchange1_name}={pos1_float:.6f} | {self.exchange2_name}={pos2_float:.6f}")
            logger.info(f"üìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: {expected_size:.6f} –∫–∞–∂–¥–∞—è")

            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            delta1 = pos1_float - expected_size
            delta2 = pos2_float - expected_size

            tolerance = 0.001  # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ

            logger.info(f"üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: delta1={delta1:.6f} | delta2={delta2:.6f}")

            # –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            if abs(delta1) > tolerance:
                await self._balance_position(
                    exchange_ws=self.exchange1WebSocket,
                    exchange_name=self.exchange1_name,
                    delta=delta1,
                    direction=self.frstDrctn,
                    symbol=self.asset
                )

            # –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
            if abs(delta2) > tolerance:
                await self._balance_position(
                    exchange_ws=self.exchange2WebSocket,
                    exchange_name=self.exchange2_name,
                    delta=delta2,
                    direction=self.scndDrctn,
                    symbol=self.asset
                )

            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False

    def _safe_float(self, value) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫ float"""
        if value is None:
            return 0.0
        if isinstance(value, str):
            try:
                return float(value)
            except (ValueError, TypeError):
                return 0.0
        if isinstance(value, (int, float)):
            return float(value)
        return 0.0

    async def _balance_position(self, exchange_ws, exchange_name: str, delta: float, direction: str, symbol: str):
        """
        –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–µ

        Args:
            exchange_ws: WebSocket –∫–ª–∏–µ–Ω—Ç –±–∏—Ä–∂–∏
            exchange_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
            delta: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (+ –∑–Ω–∞—á–∏—Ç –∏–∑–±—ã—Ç–æ–∫, - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫)
            direction: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ ('long' –∏–ª–∏ 'short')
            symbol: —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
        """
        try:
            abs_delta = abs(delta)

            if abs_delta < 0.001:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                return

            logger.info(f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ {exchange_name}: delta={delta:.6f}")

            if delta > 0:
                # –ò–∑–±—ã—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ - –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —á–∞—Å—Ç—å
                if direction == 'long':
                    # –£ –Ω–∞—Å –ª–æ–Ω–≥ –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ - –ø—Ä–æ–¥–∞–µ–º –∏–∑–ª–∏—à–µ–∫
                    await exchange_ws.close_market_order(symbol, 'short', abs_delta)
                    logger.info(f"üìâ {exchange_name}: –∑–∞–∫—Ä—ã–ª–∏ –∏–∑–ª–∏—à–µ–∫ –ª–æ–Ω–≥–∞ {abs_delta:.6f}")
                else:
                    # –£ –Ω–∞—Å —à–æ—Ä—Ç –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ - –ø–æ–∫—É–ø–∞–µ–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                    await exchange_ws.close_market_order(symbol, 'long', abs_delta)
                    logger.info(f"üìà {exchange_name}: –∑–∞–∫—Ä—ã–ª–∏ –∏–∑–ª–∏—à–µ–∫ —à–æ—Ä—Ç–∞ {abs_delta:.6f}")

            else:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ - –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å
                if direction == 'long':
                    # –õ–æ–Ω–≥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç - –ø–æ–∫—É–ø–∞–µ–º
                    await exchange_ws.place_market_order(symbol, 'long', abs_delta)
                    logger.info(f"üìà {exchange_name}: –¥–æ–±—Ä–∞–ª–∏ –ª–æ–Ω–≥ {abs_delta:.6f}")
                else:
                    # –®–æ—Ä—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç - –ø—Ä–æ–¥–∞–µ–º
                    await exchange_ws.place_market_order(symbol, 'short', abs_delta)
                    logger.info(f"üìâ {exchange_name}: –¥–æ–±—Ä–∞–ª–∏ —à–æ—Ä—Ç {abs_delta:.6f}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ {exchange_name}: {e}")

    async def findDeal(self):
        await self.before_start()
        time.sleep(10)
        step = 0
        logger.info('üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...')

        while step < self.config['trading_parameters']['parts']:
            spread_threshold = self.config['trading_parameters']['max_spread_percent']
            firstOrderbook = await self.exchange1Info.get_orderbook(symbol=self.asset)
            secondOrderbook = await self.exchange2Info.get_orderbook(symbol=self.asset)

            if not (firstOrderbook.get('bids') and len(firstOrderbook['bids']) > 0 and
                    secondOrderbook.get('asks') and len(secondOrderbook['asks']) > 0):
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–±—É–∫–∏, –∂–¥–µ–º...")
                await asyncio.sleep(2)
                continue

            first_bid, bid_volume = float(firstOrderbook['bids'][0][0]), float(firstOrderbook['bids'][0][1])
            second_ask, ask_volume = float(secondOrderbook['asks'][0][0]), float(secondOrderbook['asks'][0][1])

            self.prcDcmls1, self.qtyDcmls1 = get_decimal_places(first_bid), get_decimal_places(bid_volume)
            self.prcDcmls2, self.qtyDcmls2 = get_decimal_places(second_ask), get_decimal_places(ask_volume)

            current_spread = first_bid / second_ask
            spread_pct = (current_spread - 1) * 100

            logger.info(
                f"üí± {self.exchange1_name} bid={first_bid} | {self.exchange2_name} ask={second_ask} | —Å–ø—Ä–µ–¥={spread_pct:.4f}%")

            if current_spread < spread_threshold:
                logger.info('üéØ –í—ã–≥–æ–¥–Ω—ã–π —Å–ø—Ä–µ–¥! –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä–∞...')
                frstOrdr, scndOrdr = await asyncio.gather(
                    self.exchange1WebSocket.place_limit_order(
                        symbol=self.asset, side=self.frstDrctn, price=first_bid, qty=self.dealqty1
                    ),
                    self.exchange2WebSocket.place_limit_order(
                        symbol=self.asset, side=self.scndDrctn, price=second_ask, qty=self.dealqty2
                    ),
                    return_exceptions=True
                )

                fill_deal = await self.fillDeal(frstOrdr, scndOrdr)
                if fill_deal:
                    step += 1
                    logger.info(f'‚úÖ –®–∞–≥ {step}/{self.config["trading_parameters"]["parts"]} –∑–∞–≤–µ—Ä—à–µ–Ω')

                    # –í–û–¢ –¢–£–¢ - –ü–†–û–í–ï–†–Ø–ï–ú –ò –ë–ê–õ–ê–ù–°–ò–†–£–ï–ú –ü–û–ó–ò–¶–ò–ò
                    await self.verify_and_balance_positions(step)

        logger.info(f'üéâ –í—Å–µ {self.config["trading_parameters"]["parts"]} —à–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
        await self.verify_and_balance_positions(self.config['trading_parameters']['parts'])
        return True

    async def fillDeal(self, frstOrdr, scndOrdr):
        """–ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º-–∞—É—Ç–æ–º"""
        logger.info(f"üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤: {frstOrdr['orderId']} | {scndOrdr['orderId']}")

        # –ú–∞–∫—Å–∏–º—É–º 6 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
        start_time = time.time()

        while time.time() - start_time < 6.0:
            try:
                frstOrdrStts, scndOrdrStts = await asyncio.gather(
                    self.exchange1Info.get_order_status(order_id=frstOrdr['orderId']),
                    self.exchange2Info.get_order_status(order_id=scndOrdr['orderId']),
                    return_exceptions=True
                )

                if isinstance(frstOrdrStts, Exception) or isinstance(scndOrdrStts, Exception):
                    await asyncio.sleep(0.3)
                    continue

                first_fill = self._extract_fill_size(frstOrdrStts, frstOrdr)
                second_fill = self._extract_fill_size(scndOrdrStts, scndOrdr)
                target_qty1 = float(frstOrdr.get('qty', 0))
                target_qty2 = float(scndOrdr.get('qty', 0))

                logger.info(f"üí∞ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: {first_fill:.4f}/{target_qty1:.4f} | {second_fill:.4f}/{target_qty2:.4f}")

                # –û–±–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω—ã
                if first_fill >= target_qty1 and second_fill >= target_qty2:
                    logger.info("‚úÖ –û–±–∞ –æ—Ä–¥–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω—ã")
                    return True

                # –ü–µ—Ä–≤—ã–π –∏—Å–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π
                if first_fill >= target_qty1 and second_fill < target_qty2 :
                    logger.info("üîÑ –ü–µ—Ä–≤—ã–π –≥–æ—Ç–æ–≤, –¥–æ–±–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π")
                    await self.cancel_order(self.exchange2WebSocket, self.asset, scndOrdr['orderId'])
                    remaining = target_qty2 - second_fill
                    return await self.fillOrdr(self.exchange2WebSocket, self.exchange2Info, "new_order", "short",
                                               remaining)

                # –í—Ç–æ—Ä–æ–π –∏—Å–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π
                if second_fill >= target_qty2 and first_fill < target_qty1 :
                    logger.info("üîÑ –í—Ç–æ—Ä–æ–π –≥–æ—Ç–æ–≤, –¥–æ–±–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π")
                    await self.cancel_order(self.exchange1WebSocket, self.asset, frstOrdr['orderId'])
                    remaining = target_qty1 - first_fill
                    return await self.fillOrdr(self.exchange1WebSocket, self.exchange1Info, "new_order", "long",
                                               remaining)

                await asyncio.sleep(0.4)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ fillDeal: {e}")
                await asyncio.sleep(0.5)

        # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∏–≤–∞–µ–º
        logger.warning("‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –¥–æ–±–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        try:
            frstOrdrStts, scndOrdrStts = await asyncio.gather(
                self.exchange1Info.get_order_status(order_id=frstOrdr['orderId']),
                self.exchange2Info.get_order_status(order_id=scndOrdr['orderId'])
            )

            first_fill = self._extract_fill_size(frstOrdrStts, frstOrdr)
            second_fill = self._extract_fill_size(scndOrdrStts, scndOrdr)
            target_qty1 = float(frstOrdr.get('qty', 0))
            target_qty2 = float(scndOrdr.get('qty', 0))

            tasks = []

            # –î–æ–±–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if first_fill < target_qty1:
                remaining1 = target_qty1 - first_fill
                tasks.append(self._complete_with_market(
                    self.exchange1WebSocket, self.exchange1Info, frstOrdr['orderId'], "long", remaining1
                ))

            # –î–æ–±–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if second_fill < target_qty2:
                remaining2 = target_qty2 - second_fill
                tasks.append(self._complete_with_market(
                    self.exchange2WebSocket, self.exchange2Info, scndOrdr['orderId'], "short", remaining2
                ))

            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–æ–±–∏–≤–∞–Ω–∏—è: {e}")

        return True

    def _extract_fill_size(self, order_status, original_order):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        if not order_status:
            return 0.0

        fill_sz = order_status.get('fillSz', 0)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(fill_sz, str):
            if fill_sz in ['Order has zero size.', '']:
                return float(original_order.get('qty', 0))
            try:
                return float(fill_sz)
            except:
                return 0.0

        return float(fill_sz) if fill_sz else 0.0

    async def _complete_with_market(self, exchange_ws, info_client, order_id, direction, remaining_qty):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ä–¥–µ—Ä –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–æ–º"""
        try:
            if remaining_qty <= 0.001:
                return

            exchange_name = self.exchange1_name if exchange_ws == self.exchange1WebSocket else self.exchange2_name

            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ä–¥–µ—Ä
            await self.cancel_order(exchange_ws, self.asset, order_id)

            # –†–∞–∑–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ç –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫
            logger.info(f"üí• {exchange_name}: –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ä–∫–µ—Ç–æ–º {remaining_qty:.6f}")
            await exchange_ws.place_market_order(self.asset, direction, remaining_qty)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–æ–º: {e}")

    async def fillOrdr(self, exchange_client, info_client, orderId, direction, qty):
        """–ü—Ä–æ—Å—Ç–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Ç–∏–∫-—Å–∞–π–∑ ‚Üí –º–∞—Ä–∫–µ—Ç"""
        exchange_name = self.exchange1_name if exchange_client == self.exchange1WebSocket else self.exchange2_name

        # –≠–¢–ê–ü 1: –ñ–¥–µ–º –æ–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ (3 —Å–µ–∫—É–Ω–¥—ã)
        start_time = time.time()
        logger.info(f"üîÑ –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è {exchange_name} –æ—Ä–¥–µ—Ä–∞ {orderId}...")

        while time.time() - start_time < 3.0:
            status = await info_client.get_order_status(order_id=orderId)
            if not status:
                await asyncio.sleep(0.2)
                continue

            total_filled = self._extract_fill_size(status, {'qty': qty})

            if total_filled >= qty:
                logger.info(f"‚úÖ {exchange_name} –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {total_filled:.6f}")
                return True

            await asyncio.sleep(0.2)

        # –≠–¢–ê–ü 2: –¢–∏–∫-—Å–∞–π–∑ –ª–∏–º–∏—Ç (1 –ø–æ–ø—ã—Ç–∫–∞)
        try:
            logger.info(f"üéØ {exchange_name}: –æ—Ä–¥–µ—Ä +1 —Ç–∏–∫ –æ—Ç –ª—É—á—à–µ–π —Ü–µ–Ω—ã")

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ä–¥–µ—Ä
            await self.cancel_order(exchange_client, self.asset, orderId)

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            status = await info_client.get_order_status(order_id=orderId)
            current_filled = self._extract_fill_size(status, {'qty': qty})
            remaining = qty - current_filled

            if remaining <= 0.001:
                logger.info(f"‚úÖ {exchange_name}: –ø–æ—á—Ç–∏ –≤—Å—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–æ {remaining:.6f}")
                return True

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫-—Å–∞–π–∑ –∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            tick_size = float(await exchange_client.get_tick_size(self.asset))
            orderbook = await self._get_orderbook_for_client(exchange_client, self.asset)

            if direction == "long":
                # –ü–æ–∫—É–ø–∞–µ–º - –±–µ—Ä–µ–º –ª—É—á—à–∏–π ask + 1 —Ç–∏–∫
                best_price = float(orderbook['asks'][0][0])
                tick_price = best_price + tick_size
            else:
                # –ü—Ä–æ–¥–∞–µ–º - –±–µ—Ä–µ–º –ª—É—á—à–∏–π bid - 1 —Ç–∏–∫
                best_price = float(orderbook['bids'][0][0])
                tick_price = best_price - tick_size

            # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç +/- 1 —Ç–∏–∫
            tick_order = await exchange_client.place_limit_order(
                symbol=self.asset,
                side=direction,
                price=tick_price,
                qty=remaining
            )

            logger.info(f"üìå {exchange_name}: –ª–∏–º–∏—Ç –ø–æ —Ü–µ–Ω–µ {tick_price:.6f} (—Ç–∏–∫={tick_size})")

            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∏–∫-–ª–∏–º–∏—Ç–∞ (2 —Å–µ–∫—É–Ω–¥—ã)
            tick_start = time.time()
            while time.time() - tick_start < 2.0:
                status = await info_client.get_order_status(tick_order['orderId'])
                if status:
                    filled = self._extract_fill_size(status, {'qty': remaining})
                    if filled >= remaining * 0.99:
                        logger.info(f"‚úÖ {exchange_name}: —Ç–∏–∫-–ª–∏–º–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω")
                        return True
                await asyncio.sleep(0.1)

            # –¢–∏–∫-–ª–∏–º–∏—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ—Ç–º–µ–Ω—è–µ–º
            await self.cancel_order(exchange_client, self.asset, tick_order['orderId'])

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Ç–∏–∫-–ª–∏–º–∏—Ç–∞
            status = await info_client.get_order_status(tick_order['orderId'])
            tick_filled = self._extract_fill_size(status, {'qty': remaining})
            final_remaining = remaining - tick_filled

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–∫-–ª–∏–º–∏—Ç–∞ {exchange_name}: {e}")
            final_remaining = remaining

        # –≠–¢–ê–ü 3: –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä
        try:
            if final_remaining > 0.001:
                logger.info(f"üí• {exchange_name}: –ú–ê–†–ö–ï–¢ –û–†–î–ï–† {final_remaining:.6f}")

                await exchange_client.place_market_order(
                    symbol=self.asset,
                    side=direction,
                    qty=final_remaining
                )

                logger.info(f"‚úÖ {exchange_name}: –º–∞—Ä–∫–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞ {exchange_name}: {e}")
            return False

    async def _get_orderbook_for_client(self, exchange_client, symbol, depth=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ —á–µ—Ä–µ–∑ Info –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        if exchange_client == self.exchange1WebSocket:
            return await self.exchange1Info.get_orderbook(symbol=symbol)
        elif exchange_client == self.exchange2WebSocket:
            return await self.exchange2Info.get_orderbook(symbol=symbol)
        else:
            raise ValueError("Unknown exchange client")

    async def close_dual_position(self, qty1=None, qty2=None):
        if qty1 is None and qty2 is None:
            qty1 = await self.exchange1WebSocket.get_position_size(self.asset, self.frstDrctn)
            qty2 = await self.exchange2WebSocket.get_position_size(self.asset, self.scndDrctn)
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, lambda: input(
            "Press Enter to start closing the deal...    QTY –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –û–î–ù–û–ô –ß–ê–°–¢–¨–Æ –û–¢ –°–î–ï–õ–ö–ò"))
        await self.before_start()
        step = 0
        while step < self.config['trading_parameters']['parts']:
            firstOrderbook = await self.exchange1Info.get_orderbook(symbol=self.asset)
            secondOrderbook = await self.exchange2Info.get_orderbook(symbol=self.asset)
            first_bid, first_ask = float(firstOrderbook['bids'][0][0]), float(firstOrderbook['asks'][0][0])
            second_bid, second_ask = float(secondOrderbook['bids'][0][0]), float(secondOrderbook['asks'][0][0])
            current_spread = second_bid / first_ask
            spread_threshold = self.config['trading_parameters']['max_spread_close_percent']
            logger.info(f'spread - {spread_threshold}')
            if current_spread < spread_threshold:
                logger.info('spread to close')
                step += 1
                frstOrdr = await self.exchange1WebSocket.close_limit_order(
                    symbol=self.asset,
                    side="short",
                    price=first_ask,
                    qty=qty1
                )
                scndOrdr = await self.exchange2WebSocket.close_limit_order(
                    symbol=self.asset,
                    side="long",
                    price=second_bid,
                    qty=qty2
                )
                while True:
                    frstOrdrStts, scndOrdrStts = await asyncio.gather(
                        self.exchange1Info.get_order_status(order_id=frstOrdr['orderId']),
                        self.exchange2Info.get_order_status(order_id=scndOrdr['orderId'])
                    )
                    if frstOrdrStts['fillSz'] == qty1 and scndOrdrStts['fillSz'] != qty2:
                        await self.cancel_order(self.exchange2WebSocket, self.asset, scndOrdr['orderId'])
                        order = await self.exchange2WebSocket.close_limit_order(
                            symbol=self.asset,
                            side="long",
                            price=second_ask,
                            qty=float(qty2) - float(scndOrdrStts['fillSz'])
                        )
                        await self.fillcloseOrdr(self.exchange2Info, self.exchange2WebSocket, order['orderId'], "long",
                                                 float(qty2) - float(scndOrdrStts['fillSz']))
                        return True
                    if frstOrdrStts['fillSz'] != qty1 and scndOrdrStts['fillSz'] == qty2:
                        await self.cancel_order(self.exchange1WebSocket, self.asset, frstOrdr['orderId'])
                        order = await self.exchange1WebSocket.close_limit_order(
                            symbol=self.asset,
                            side="short",
                            price=first_bid,
                            qty=float(qty1) - float(frstOrdrStts['fillSz'])
                        )
                        await self.fillcloseOrdr(self.exchange1Info, self.exchange1WebSocket, order['orderId'], "short",
                                                 float(qty1) - float(frstOrdrStts['fillSz']))
                        return True
                    await asyncio.sleep(0.07)

    async def fillcloseOrdr(self, exchangeInfo, exchangeWebSocket, orderId, direction, qty):
        exchange_name = self.exchange1_name if exchangeWebSocket == self.exchange1WebSocket else self.exchange2_name
        start_time = time.time()
        tickSize = await exchangeWebSocket.get_tick_size(self.asset)
        while True:
            status = await exchangeInfo.get_order_status(order_id=orderId)
            total_filled = float(status['fillSz'])
            logger.info(f'total_filled {total_filled}')
            if float(total_filled) >= float(qty):
                logger.info(f'–∑–∞—Ñ–∏–ª–∏–ª–æ –æ—Ä–¥–µ—Ä1 - {exchange_name}')
                return True
            if time.time() - start_time > 4.7:
                await self.cancel_order(exchangeWebSocket=exchangeWebSocket, symbol=self.asset, order_id=orderId)
                total_filled = float(status['fillSz'])
                remaining = qty - total_filled
                logger.info(f'remaining - {remaining}')
                orderbook = await exchangeInfo.get_orderbook(symbol=self.asset, depth=10)
                price = float(orderbook['bids'][0][0] if direction == "short" else orderbook['asks'][0][0])
                new_order = await exchangeWebSocket.close_limit_order(symbol=self.asset, side=direction, price=price,
                                                                      qty=remaining)
                await asyncio.sleep(1)
                status = await exchangeInfo.get_order_status(new_order['orderId'])
                position = float(status['fillSz'])
                if position == remaining:
                    logger.info(f'–∑–∞—Ñ–∏–ª–∏–ª–æ –æ—Ä–¥–µ—Ä2 - {exchange_name}')
                    return True
                else:
                    await self.cancel_order(exchangeWebSocket, self.asset, new_order['orderId'])
                    lstchnce = remaining - position
                    logger.info(f'–ª–∞—Å—Ç —à–∞–Ω—Å - {lstchnce}')
                    new_order = await exchangeWebSocket.close_limit_order(
                        symbol=self.asset,
                        side=direction,
                        price=float(price) + float(tickSize) if direction == 'long' else float(price) - float(tickSize),
                        qty=lstchnce
                    )
                    await asyncio.sleep(1)
                    status = await exchangeInfo.get_order_status(new_order['orderId'])
                    position = float(status['fillSz'])
                    if position == lstchnce:
                        logger.info(f'–∑–∞—Ñ–∏–ª–∏–ª–æ –æ—Ä–¥–µ—Ä3 - {exchange_name}')
                        return True
                    else:
                        await self.cancel_order(exchangeWebSocket, self.asset, orderId)
                        size = lstchnce - position
                        market_order = await exchangeWebSocket.close_market_order(symbol=self.asset, side=direction,
                                                                                  qty=size)
                        logger.info(f'–∑–∞—Ñ–∏–ª–∏–ª–æ –æ—Ä–¥–µ—Ä4 - {exchange_name}')
                        return True

    async def cancel_order(self, exchangeWebSocket, symbol, order_id):
        max_attempts = 2
        for attempt in range(1, max_attempts + 1):
            try:
                return await exchangeWebSocket.cancel_order(symbol, order_id)
            except Exception as e:
                txt = str(e).lower()
                keywords_map = {
                    "poz filled": ["filled", "already filled", "cannot cancel filled"],
                    "order not found": ["not found", "does not exist", "unknown order"],
                    "invalid order": ["invalid order", "bad order", "unsupported"],
                }
                for result, keys in keywords_map.items():
                    if any(k in txt for k in keys):
                        return result
                if attempt < max_attempts:
                    await asyncio.sleep(0.1)
                    continue
                return f"error: {txt}"
        return "cancel failed"

    async def dual_open(self, exchange1WebSocket, price1, exchange2WebSocket, price2, qty):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ–±–µ–∏—Ö –±–∏—Ä–∂–∞—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤–º–µ—Å—Ç–æ FOK
        """
        logger.info(f'üéØ DUAL OPEN: qty={qty} prices={price1}/{price2}')

        start_time = time.time()

        try:
            # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            results = await asyncio.gather(
                exchange1WebSocket.place_limit_order(self.asset, self.frstDrctn, price1, qty),
                exchange2WebSocket.place_limit_order(self.asset, self.scndDrctn, price2, qty),
                return_exceptions=True
            )

            execution_time = (time.time() - start_time) * 1000
            logger.info(f'‚ö° Dual execution time: {execution_time:.1f}ms')

            result1, result2 = results

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if isinstance(result1, Exception):
                logger.error(f'‚ùå Exchange1 exception: {result1}')
                result1 = {"success": False, "error": str(result1)}

            if isinstance(result2, Exception):
                logger.error(f'‚ùå Exchange2 exception: {result2}')
                result2 = {"success": False, "error": str(result2)}

            # –ü–æ–ª—É—á–∞–µ–º order_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            order1_id = result1.get('orderId') if not isinstance(result1, Exception) else None
            order2_id = result2.get('orderId') if not isinstance(result2, Exception) else None

            # –ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (2 —Å–µ–∫—É–Ω–¥—ã)
            await asyncio.sleep(2.0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            status1 = await self.exchange1Info.get_order_status(order1_id) if order1_id else None
            status2 = await self.exchange2Info.get_order_status(order2_id) if order2_id else None

            fill1 = self._extract_fill_size(status1, result1) if status1 else 0
            fill2 = self._extract_fill_size(status2, result2) if status2 else 0

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            filled1 = fill1 >= qty * 0.99
            filled2 = fill2 >= qty * 0.99

            if filled1 and filled2:
                # ‚úÖ –û–ë–ê –ò–°–ü–û–õ–ù–ï–ù–´
                logger.info(f'‚úÖ DUAL SUCCESS!')
                logger.info(f'   Exchange1: {fill1:.6f}@{price1}')
                logger.info(f'   Exchange2: {fill2:.6f}@{price2}')

                return {
                    "success": True,
                    "both_filled": True,
                    "exchange1_result": {"filledQty": fill1, "avgPrice": price1, "orderId": order1_id},
                    "exchange2_result": {"filledQty": fill2, "avgPrice": price2, "orderId": order2_id},
                    "action_taken": "both_filled"
                }

            elif filled1 and not filled2:
                # ‚ö†Ô∏è –¢–û–õ–¨–ö–û –ü–ï–†–í–´–ô –ò–°–ü–û–õ–ù–ï–ù - –∑–∞–∫—Ä—ã–≤–∞–µ–º
                logger.warning(f'‚ö†Ô∏è Only Exchange1 filled - closing position')

                # –û—Ç–º–µ–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π –æ—Ä–¥–µ—Ä
                if order2_id:
                    await self.cancel_order(exchange2WebSocket, self.asset, order2_id)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                close_side = "short" if self.frstDrctn == "long" else "long"
                await exchange1WebSocket.close_market_order(self.asset, close_side, fill1)

                logger.info(f'üö® Exchange1 position closed via market')

                return {
                    "success": False,
                    "both_filled": False,
                    "exchange1_result": {"filledQty": fill1, "avgPrice": price1},
                    "exchange2_result": {"filledQty": fill2, "avgPrice": price2},
                    "action_taken": "closed_exchange1"
                }

            elif not filled1 and filled2:
                # ‚ö†Ô∏è –¢–û–õ–¨–ö–û –í–¢–û–†–û–ô –ò–°–ü–û–õ–ù–ï–ù - –∑–∞–∫—Ä—ã–≤–∞–µ–º
                logger.warning(f'‚ö†Ô∏è Only Exchange2 filled - closing position')

                # –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ä–¥–µ—Ä
                if order1_id:
                    await self.cancel_order(exchange1WebSocket, self.asset, order1_id)

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
                close_side = "short" if self.scndDrctn == "long" else "long"
                await exchange2WebSocket.close_market_order(self.asset, close_side, fill2)

                logger.info(f'üö® Exchange2 position closed via market')

                return {
                    "success": False,
                    "both_filled": False,
                    "exchange1_result": {"filledQty": fill1, "avgPrice": price1},
                    "exchange2_result": {"filledQty": fill2, "avgPrice": price2},
                    "action_taken": "closed_exchange2"
                }

            else:
                # üîÑ –û–ë–ê –ù–ï –ò–°–ü–û–õ–ù–ï–ù–´ - –æ—Ç–º–µ–Ω—è–µ–º
                logger.info(f'üîÑ Both orders not filled - canceling')

                if order1_id:
                    await self.cancel_order(exchange1WebSocket, self.asset, order1_id)
                if order2_id:
                    await self.cancel_order(exchange2WebSocket, self.asset, order2_id)

                return {
                    "success": False,
                    "both_filled": False,
                    "exchange1_result": {"filledQty": fill1, "avgPrice": price1},
                    "exchange2_result": {"filledQty": fill2, "avgPrice": price2},
                    "action_taken": "both_rejected"
                }

        except Exception as e:
            logger.error(f'‚ùå Critical error in dual_open: {e}')
            return {
                "success": False,
                "both_filled": False,
                "exchange1_result": {"error": str(e)},
                "exchange2_result": {"error": str(e)},
                "action_taken": "exception"
            }