import logging
import time
from datetime import datetime
from typing import Dict, Any, Optional, Tuple
import asyncio
import json
import os

# –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢ - –∫–ª–∞—Å—Å, –∞ –Ω–µ –º–æ–¥—É–ª—å
from logic.LongShort.LongShort import LongShort

logger = logging.getLogger(__name__)


class LongShortV2(LongShort):
    def __init__(self, exchange1_name: Any, exchange2_name: Any, reverse: bool, asset: str,
                 config_path: str = r"C:/Users/strel/PycharmProjects/rn_need_projects/jekius_maximus/logic/config.json"):
        super().__init__(exchange1_name, exchange2_name, reverse, asset, config_path)

        # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –æ–±—Ä–∞—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.frstDrctn = "long"  # –õ–æ–Ω–≥ –Ω–∞ –ø–µ—Ä–≤–æ–π –±–∏—Ä–∂–µ
        self.scndDrctn = "short"  # –®–æ—Ä—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–∏—Ä–∂–µ

    async def findDeal(self):
        await self.before_start()
        # time.sleep(10)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        step = 0
        logger.info('üîç –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π V2...')

        while step < self.config['trading_parameters']['parts']:
            spread_threshold = self.config['trading_parameters']['max_spread_percent']
            firstOrderbook = await self.exchange1Info.get_orderbook(symbol=self.asset)
            secondOrderbook = await self.exchange2Info.get_orderbook(symbol=self.asset)

            if not (firstOrderbook.get('asks') and len(firstOrderbook['asks']) > 0 and
                    secondOrderbook.get('bids') and len(secondOrderbook['bids']) > 0):
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–±—É–∫–∏, –∂–¥–µ–º...")
                await asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–µ–µ
                continue

            # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –±–µ—Ä–µ–º ask –ø–µ—Ä–≤–æ–π –∏ bid –≤—Ç–æ—Ä–æ–π
            first_ask, ask_volume = float(firstOrderbook['asks'][0][0]), float(firstOrderbook['asks'][0][1])
            second_bid, bid_volume = float(secondOrderbook['bids'][0][0]), float(secondOrderbook['bids'][0][1])

            # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
            current_spread = first_ask / second_bid
            spread_pct = (current_spread - 1) * 100

            logger.info(
                f"üí± V2: {self.exchange1_name} ask={first_ask} | {self.exchange2_name} bid={second_bid} | —Å–ø—Ä–µ–¥={spread_pct:.4f}%")

            if current_spread < spread_threshold:
                logger.info('üéØ –í—ã–≥–æ–¥–Ω—ã–π —Å–ø—Ä–µ–¥ V2! –ê—Ç–∞–∫—É–µ–º!')

                start_time = time.time()
                # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –ø–æ–∫—É–ø–∞–µ–º ask, –ø—Ä–æ–¥–∞–µ–º bid
                frstOrdr, scndOrdr = await asyncio.gather(
                    self.exchange1WebSocket.place_limit_order(
                        symbol=self.asset, side=self.frstDrctn, price=first_ask, qty=self.dealqty1
                    ),
                    self.exchange2WebSocket.place_limit_order(
                        symbol=self.asset, side=self.scndDrctn, price=second_bid, qty=self.dealqty2
                    ),
                    return_exceptions=True
                )

                execution_time = (time.time() - start_time) * 1000
                logger.info(f'‚ö° V2 Orders placed in {execution_time:.1f}ms')

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                if isinstance(frstOrdr, Exception) or isinstance(scndOrdr, Exception):
                    logger.error(f'‚ùå V2 Order failed: {frstOrdr if isinstance(frstOrdr, Exception) else scndOrdr}')
                    await asyncio.sleep(0.05)
                    continue

                fill_deal = await self.fillDeal(frstOrdr, scndOrdr)
                if fill_deal:
                    step += 1
                    logger.info(f'‚úÖ V2 –®–∞–≥ {step}/{self.config["trading_parameters"]["parts"]} –∑–∞–≤–µ—Ä—à–µ–Ω')
                    await self.verify_and_balance_positions(step)
            else:
                await asyncio.sleep(0.05)  # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

        logger.info(f'üéâ V2 - –í—Å–µ {self.config["trading_parameters"]["parts"]} —à–∞–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
        await self.verify_and_balance_positions(self.config['trading_parameters']['parts'])
        return True

    async def market_attack_v2(self):
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è V2 —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞–º–∏"""
        await self.before_start()
        step = 0
        logger.info('üöÄ V2 MARKET ATTACK MODE!')

        while step < self.config['trading_parameters']['parts']:
            spread_threshold = self.config['trading_parameters']['max_spread_percent']

            # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
            firstOrderbook, secondOrderbook = await asyncio.gather(
                self.exchange1Info.get_orderbook(symbol=self.asset),
                self.exchange2Info.get_orderbook(symbol=self.asset)
            )

            if not (firstOrderbook.get('asks') and secondOrderbook.get('bids')):
                await asyncio.sleep(0.01)
                continue

            first_ask = float(firstOrderbook['asks'][0][0])
            second_bid = float(secondOrderbook['bids'][0][0])
            current_spread = first_ask / second_bid
            spread_pct = (current_spread - 1) * 100

            if current_spread < spread_threshold:
                logger.info(f'üéØ V2 MARKET ATTACK! spread={spread_pct:.4f}%')

                start_time = time.time()
                # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞
                await asyncio.gather(
                    self.exchange1WebSocket.place_market_order(self.asset, "long", self.dealqty1),
                    self.exchange2WebSocket.place_market_order(self.asset, "short", self.dealqty2)
                )

                execution_time = (time.time() - start_time) * 1000
                logger.info(f'‚ö° V2 Market attack: {execution_time:.1f}ms')

                step += 1
                logger.info(f'‚úÖ V2 Market step {step} completed')

                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
                if step % 2 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —à–∞–≥
                    await self.verify_and_balance_positions(step)

        logger.info(f'üèÅ V2 MARKET ATTACK COMPLETE!')
        return True