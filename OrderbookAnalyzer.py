import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')


class OrderbookAnalyzer:
    def __init__(self, csv_path):
        self.df = pd.read_csv(csv_path)
        self.df['timestamp'] = pd.to_datetime(self.df['timestamp'])
        self._calculate_spreads()

    def _calculate_spreads(self):
        """–†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–æ–≤ –∫–∞–∫ –≤ —Å–∫–∞–ª—å–ø–µ—Ä–µ"""
        # Spread1: Binance long / Hyperliquid short
        self.df['spread1'] = (1 - self.df['binance_ask1_price'] / self.df['hyperliquid_bid1_price']) * 100

        # Spread2: Hyperliquid long / Binance short
        self.df['spread2'] = (1 - self.df['hyperliquid_ask1_price'] / self.df['binance_bid1_price']) * 100

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
        self.df['max_spread'] = np.maximum(self.df['spread1'], self.df['spread2'])

        # –õ—É—á—à–∏–π —Å–ø—Ä–µ–¥ (–∫–æ—Ç–æ—Ä—ã–π –±—ã –≤—ã–±—Ä–∞–ª —Å–∫–∞–ª—å–ø–µ—Ä)
        self.df['best_spread'] = np.where(
            self.df['spread1'] > self.df['spread2'],
            self.df['spread1'],
            self.df['spread2']
        )

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        self.df['direction'] = np.where(
            self.df['spread1'] > self.df['spread2'],
            'Binance_long_HL_short',
            'HL_long_Binance_short'
        )

    def analyze_profitability(self, min_spread_pct=0.26, max_hold_seconds=30):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
        tradeable = self.df[self.df['best_spread'] >= min_spread_pct].copy()

        if len(tradeable) == 0:
            return {"error": "–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"}

        # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        profits = []
        hold_times = []

        for idx in tradeable.index:
            entry_spread = tradeable.loc[idx, 'best_spread']
            entry_time = tradeable.loc[idx, 'timestamp']

            # –ò—â–µ–º –º–æ–º–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è (–∫–æ–≥–¥–∞ —Å–ø—Ä–µ–¥ —Å—Ç–∞–Ω–µ—Ç –º–µ–Ω—å—à–µ)
            future_data = self.df[
                (self.df['timestamp'] > entry_time) &
                (self.df['timestamp'] <= entry_time + timedelta(seconds=max_hold_seconds))
                ]

            if len(future_data) > 0:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–≥–¥–∞ —Å–ø—Ä–µ–¥ —É–ø–∞–ª –¥–æ –ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è
                exit_points = future_data[future_data['best_spread'] < min_spread_pct * 0.3]

                if len(exit_points) > 0:
                    exit_time = exit_points.iloc[0]['timestamp']
                    hold_time = (exit_time - entry_time).total_seconds()

                    # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å: –ø—Ä–æ—Ñ–∏—Ç = entry_spread - –∫–æ–º–∏—Å—Å–∏–∏ - –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                    profit = entry_spread - 0.05 - 0.02  # 0.05% –∫–æ–º–∏—Å—Å–∏–∏, 0.02% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

                    profits.append(profit)
                    hold_times.append(hold_time)

        return {
            "total_trades": len(profits),
            "avg_profit": np.mean(profits) if profits else 0,
            "avg_hold_time": np.mean(hold_times) if hold_times else 0,
            "win_rate": len([p for p in profits if p > 0]) / len(profits) * 100 if profits else 0,
            "profits": profits,
            "hold_times": hold_times
        }

    def optimize_settings(self):
        """–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        thresholds = np.arange(0.05, 1.0, 0.05)
        results = []

        for threshold in thresholds:
            trades = len(self.df[self.df['best_spread'] >= threshold])
            avg_spread = self.df[self.df['best_spread'] >= threshold]['best_spread'].mean()

            if trades > 0:
                profitability = self.analyze_profitability(threshold)
                daily_trades = trades / (len(self.df) / (24 * 60))  # –Ω–∞ –¥–µ–Ω—å

                results.append({
                    'threshold': threshold,
                    'trades_count': trades,
                    'daily_trades': daily_trades,
                    'avg_spread': avg_spread,
                    'avg_profit': profitability.get('avg_profit', 0),
                    'win_rate': profitability.get('win_rate', 0)
                })

        return pd.DataFrame(results)

    def plot_comprehensive_analysis(self, min_spread=0.26):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"""
        fig, axes = plt.subplots(3, 2, figsize=(16, 18))
        fig.suptitle('üìä –ê–ù–ê–õ–ò–ó –û–†–î–ï–†–ë–£–ö–ê MOVE - –ü–û–õ–ù–´–ô –†–ê–ó–ë–û–†', fontsize=16, fontweight='bold')

        # 1. –î–∏–Ω–∞–º–∏–∫–∞ —Å–ø—Ä–µ–¥–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        ax1 = axes[0, 0]
        sample_data = self.df.iloc[::max(1, len(self.df) // 500)]  # —Å—ç–º–ø–ª–∏—Ä—É–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

        ax1.plot(sample_data.index, sample_data['spread1'], alpha=0.7, label='Spread1 (Bin‚ÜíHL)', linewidth=1)
        ax1.plot(sample_data.index, sample_data['spread2'], alpha=0.7, label='Spread2 (HL‚ÜíBin)', linewidth=1)
        ax1.plot(sample_data.index, sample_data['best_spread'], color='red', label='Best Spread', linewidth=2)
        ax1.axhline(y=min_spread, color='green', linestyle='--', label=f'–ü–æ—Ä–æ–≥ {min_spread}%')
        ax1.set_title('üî• –î–∏–Ω–∞–º–∏–∫–∞ —Å–ø—Ä–µ–¥–æ–≤')
        ax1.set_ylabel('–°–ø—Ä–µ–¥ (%)')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø—Ä–µ–¥–æ–≤
        ax2 = axes[0, 1]
        spread_data = self.df['best_spread'].dropna()
        ax2.hist(spread_data, bins=50, alpha=0.7, color='skyblue', edgecolor='black')
        ax2.axvline(x=min_spread, color='red', linestyle='--', linewidth=2, label=f'–ü–æ—Ä–æ–≥ {min_spread}%')
        ax2.set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö —Å–ø—Ä–µ–¥–æ–≤')
        ax2.set_xlabel('–°–ø—Ä–µ–¥ (%)')
        ax2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        ax2.legend()
        ax2.grid(True, alpha=0.3)

        # 3. –¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        ax3 = axes[1, 0]
        tradeable = self.df[self.df['best_spread'] >= min_spread]
        hourly_trades = tradeable.groupby(tradeable['timestamp'].dt.hour).size()

        bars = ax3.bar(hourly_trades.index, hourly_trades.values, color='lightgreen', alpha=0.8)
        ax3.set_title('‚è∞ –¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º')
        ax3.set_xlabel('–ß–∞—Å (UTC)')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤')
        ax3.grid(True, alpha=0.3)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar in bars:
            height = bar.get_height()
            if height > 0:
                ax3.text(bar.get_x() + bar.get_width() / 2., height + 0.5,
                         f'{int(height)}', ha='center', va='bottom', fontsize=9)

        # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞ —Å–ø—Ä–µ–¥–∞
        ax4 = axes[1, 1]
        opt_results = self.optimize_settings()

        ax4_twin = ax4.twinx()
        line1 = ax4.plot(opt_results['threshold'], opt_results['daily_trades'], 'bo-', label='–°–¥–µ–ª–æ–∫/–¥–µ–Ω—å')
        line2 = ax4_twin.plot(opt_results['threshold'], opt_results['avg_profit'], 'ro-', label='–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å %')

        ax4.set_xlabel('–ü–æ—Ä–æ–≥ —Å–ø—Ä–µ–¥–∞ (%)')
        ax4.set_ylabel('–°–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å', color='blue')
        ax4_twin.set_ylabel('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (%)', color='red')
        ax4.set_title('‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫')
        ax4.grid(True, alpha=0.3)

        # –õ–µ–≥–µ–Ω–¥–∞
        lines = line1 + line2
        labels = [l.get_label() for l in lines]
        ax4.legend(lines, labels, loc='upper right')

        # 5. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏
        ax5 = axes[2, 0]
        sample_for_corr = self.df.iloc[::max(1, len(self.df) // 1000)]
        ax5.scatter(sample_for_corr['binance_ask1_price'], sample_for_corr['hyperliquid_ask1_price'],
                    alpha=0.6, s=1, color='purple')

        # –õ–∏–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        min_price = min(sample_for_corr['binance_ask1_price'].min(), sample_for_corr['hyperliquid_ask1_price'].min())
        max_price = max(sample_for_corr['binance_ask1_price'].max(), sample_for_corr['hyperliquid_ask1_price'].max())
        ax5.plot([min_price, max_price], [min_price, max_price], 'r--', alpha=0.8, label='–ò–¥–µ–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è')

        correlation = np.corrcoef(sample_for_corr['binance_ask1_price'], sample_for_corr['hyperliquid_ask1_price'])[
            0, 1]
        ax5.set_title(f'üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω (r={correlation:.4f})')
        ax5.set_xlabel('Binance Ask')
        ax5.set_ylabel('Hyperliquid Ask')
        ax5.legend()
        ax5.grid(True, alpha=0.3)

        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º —Å–¥–µ–ª–æ–∫
        ax6 = axes[2, 1]
        direction_stats = tradeable['direction'].value_counts()

        colors = ['lightcoral', 'lightblue']
        wedges, texts, autotexts = ax6.pie(direction_stats.values,
                                           labels=[d.replace('_', '\n') for d in direction_stats.index],
                                           autopct='%1.1f%%',
                                           colors=colors,
                                           startangle=90)

        ax6.set_title('üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫')

        plt.tight_layout()
        plt.show()

    def print_detailed_stats(self, min_spread=0.26):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("=" * 80)
        print("üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print("=" * 80)

        total_points = len(self.df)
        tradeable = self.df[self.df['best_spread'] >= min_spread]
        trade_count = len(tradeable)

        print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {total_points:,}")
        print(f"   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {trade_count:,}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ: {trade_count / total_points * 100:.2f}%")
        print(f"   ‚Ä¢ –°–¥–µ–ª–æ–∫ –≤ —á–∞—Å: ~{trade_count / 24:.1f}")
        print()

        print(f"üí∞ –ê–ù–ê–õ–ò–ó –°–ü–†–ï–î–û–í:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ (–≤—Å–µ): {self.df['best_spread'].mean():.4f}%")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ (—Ç–æ—Ä–≥–æ–≤—ã–µ): {tradeable['best_spread'].mean():.4f}%")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {self.df['best_spread'].max():.4f}%")
        print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Å–ø—Ä–µ–¥: {self.df['best_spread'].median():.4f}%")
        print()

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        profit_analysis = self.analyze_profitability(min_spread)
        if 'error' not in profit_analysis:
            print(f"üéØ –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò:")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: {profit_analysis['avg_profit']:.4f}%")
            print(f"   ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {profit_analysis['win_rate']:.1f}%")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {profit_analysis['avg_hold_time']:.1f} —Å–µ–∫")
            print()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"‚öôÔ∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ê–ú:")
        opt_df = self.optimize_settings()
        best_config = opt_df.loc[opt_df['avg_profit'].idxmax()] if len(opt_df) > 0 else None

        if best_config is not None:
            print(f"   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {best_config['threshold']:.3f}%")
            print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: {best_config['daily_trades']:.1f}")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {best_config['avg_profit']:.4f}%")
            print()

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        print(f"üìã –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        for threshold in [0.1, 0.15, 0.2, 0.3, 0.4, 0.5]:
            trades = len(self.df[self.df['best_spread'] >= threshold])
            if trades > 0:
                daily = trades / (len(self.df) / (24 * 60))
                avg_spread = self.df[self.df['best_spread'] >= threshold]['best_spread'].mean()
                print(
                    f"   ‚Ä¢ –ü–æ—Ä–æ–≥ {threshold:.1f}%: {trades} —Å–¥–µ–ª–æ–∫ ({daily:.1f}/–¥–µ–Ω—å), —Å—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ {avg_spread:.3f}%")

        print("=" * 80)


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = OrderbookAnalyzer('orderbook_MOVE_120306.csv')

    # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analyzer.print_detailed_stats(min_spread=0.26)

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
    analyzer.plot_comprehensive_analysis(min_spread=0.26)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
    print("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –†–ê–ó–ù–´–• –ü–û–†–û–ì–û–í:")
    for threshold in [0.15, 0.2, 0.26, 0.3, 0.4]:
        profit_data = analyzer.analyze_profitability(threshold)
        if 'error' not in profit_data:
            print(f"–ü–æ—Ä–æ–≥ {threshold}%: {profit_data['total_trades']} —Å–¥–µ–ª–æ–∫, "
                  f"–ø—Ä–∏–±—ã–ª—å {profit_data['avg_profit']:.3f}%, "
                  f"–≤–∏–Ω—Ä–µ–π—Ç {profit_data['win_rate']:.1f}%")