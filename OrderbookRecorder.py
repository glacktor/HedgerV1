import asyncio
import sys
import time
import csv
import json
import logging
from datetime import datetime
from CexWsClients.AsyncBinanceWSClient import AsyncBinanceWSClient
from CexWsClients.AsyncHyperliquidWSClient import AsyncHyperliquidWSClient
from InfoClients.AsyncBinanceInfoClient import AsyncBinanceInfoClient
from InfoClients.AsyncHyperliquidInfoClient import AsyncHyperliquidInfoClient
from DragonflyDb.DragonFlyConnector import DragonFlyConnector

logger = logging.getLogger(__name__)
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


class OrderbookRecorder:
    def __init__(self, asset: str = "MOVE",
                 config_path: str = r"C:/Users/strel/PycharmProjects/rn_need_projects/jekius_maximus/Scalper/config/config.json"):
        self.asset = asset
        self.csv_file = None
        self.csv_writer = None
        self.record_count = 0

        with open(config_path, 'r') as f:
            self.config = json.load(f)

    async def init_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        self.binance_db = DragonFlyConnector(exchange="binance")
        self.hyperliquid_db = DragonFlyConnector(exchange="hyperliquid")

        self.binance_ws = AsyncBinanceWSClient(
            self.config["api_keys"]["binance"]["api_key"],
            self.config["api_keys"]["binance"]["api_secret"]
        )

        self.hyperliquid_ws = AsyncHyperliquidWSClient.from_key(
            self.config["api_keys"]["hyperliquid"]["api_key"]
        )

        self.binance_info = AsyncBinanceInfoClient(self.binance_db)
        self.hyperliquid_info = AsyncHyperliquidInfoClient(self.hyperliquid_db)

        await asyncio.gather(
            self.binance_ws.connect_ws(),
            self.hyperliquid_ws.connect_ws()
        )

        await asyncio.gather(
            self.binance_ws.subscribe_orderbook(self.asset),
            self.hyperliquid_ws.subscribe_orderbook(self.asset)
        )

        print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        await asyncio.sleep(2)

    def _init_csv(self):
        """–°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        filename = f"orderbook_{self.asset}_{datetime.now().strftime('%H%M%S')}.csv"

        self.csv_file = open(filename, 'w', newline='', encoding='utf-8')
        self.csv_writer = csv.writer(self.csv_file)

        headers = ['timestamp',
                   'binance_bid1_price', 'binance_bid1_qty', 'binance_bid2_price', 'binance_bid2_qty',
                   'binance_ask1_price', 'binance_ask1_qty', 'binance_ask2_price', 'binance_ask2_qty',
                   'hyperliquid_bid1_price', 'hyperliquid_bid1_qty', 'hyperliquid_bid2_price', 'hyperliquid_bid2_qty',
                   'hyperliquid_ask1_price', 'hyperliquid_ask1_qty', 'hyperliquid_ask2_price', 'hyperliquid_ask2_qty']

        self.csv_writer.writerow(headers)
        self.csv_file.flush()

        print(f"üíæ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        return filename

    def _extract_prices(self, orderbook, prefix):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—ã –∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞ —Å fallback –Ω–∞ –Ω—É–ª–∏"""
        try:
            if not isinstance(orderbook, dict) or not orderbook.get('bids') or not orderbook.get('asks'):
                return ['0', '0', '0', '0', '0', '0', '0', '0']

            bids = orderbook['bids']
            asks = orderbook['asks']

            return [
                bids[0][0] if len(bids) > 0 else '0', bids[0][1] if len(bids) > 0 else '0',
                bids[1][0] if len(bids) > 1 else '0', bids[1][1] if len(bids) > 1 else '0',
                asks[0][0] if len(asks) > 0 else '0', asks[0][1] if len(asks) > 0 else '0',
                asks[1][0] if len(asks) > 1 else '0', asks[1][1] if len(asks) > 1 else '0'
            ]
        except:
            return ['0', '0', '0', '0', '0', '0', '0', '0']

    async def record_orderbook(self, duration: int = 150):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä–±—É–∫ –Ω–∞–ø—Ä—è–º—É—é –≤ CSV"""
        await self.init_clients()
        filename = self._init_csv()

        start_time = time.time()
        end_time = start_time + duration

        print(f"üé¨ –ó–∞–ø–∏—Å—å –æ—Ä–¥–µ—Ä–±—É–∫–∞ {self.asset} –Ω–∞ {duration}—Å...")

        try:
            while time.time() < end_time:
                timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                results = await asyncio.gather(
                    self.binance_info.get_orderbook(self.asset),
                    self.hyperliquid_info.get_orderbook(self.asset),
                    return_exceptions=True
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
                row = [timestamp]
                row.extend(self._extract_prices(results[0], 'binance'))
                row.extend(self._extract_prices(results[1], 'hyperliquid'))

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –≤ —Ñ–∞–π–ª
                self.csv_writer.writerow(row)
                self.record_count += 1

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                if self.record_count % 10 == 0:
                    self.csv_file.flush()

                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –∑–∞–ø–∏—Å–µ–π
                if self.record_count % 25 == 0:
                    remaining = int(end_time - time.time())
                    print(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ: {self.record_count} | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}—Å")

                await asyncio.sleep(0.2)

        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        finally:
            if self.csv_file:
                self.csv_file.close()
            print(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.record_count} –∑–∞–ø–∏—Å–µ–π –≤ {filename}")

    async def close_clients(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            await asyncio.gather(
                self.binance_ws.close(),
                self.hyperliquid_ws.close(),
                return_exceptions=True
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")


async def main():
    recorder = OrderbookRecorder("MOVE")
    try:
        await recorder.record_orderbook(150)
    finally:
        await recorder.close_clients()


if __name__ == "__main__":
    asyncio.run(main())