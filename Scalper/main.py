# test_scalper.py
import asyncio
import json
import logging
import sys

from Scalper import Scalper

logger = logging.getLogger(__name__)
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

async def wait_for_orderbooks(binance_info, hyperliquid_info, symbol):
    for attempt in range(5):
        try:
            ob1, ob2 = await asyncio.gather(
                binance_info.get_orderbook(symbol),
                hyperliquid_info.get_orderbook(symbol)
            )

            if (ob1.get('bids', []) and ob1.get('asks', []) and
                ob2.get('bids', []) and ob2.get('asks', [])):
                print("‚úÖ –û—Ä–¥–µ—Ä–±—É–∫–∏ –≥–æ—Ç–æ–≤—ã")
                return True

        except Exception as e:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º

        await asyncio.sleep(1)

    raise Exception("–û—Ä–¥–µ—Ä–±—É–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏—Å—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥")


async def main():
    scalper = Scalper("MOVE")

    try:
        await scalper.checkBeforeStart()
        await scalper.closingDeal()  # –û–¥–∏–Ω –≤—ã–∑–æ–≤ —Å while True –≤–Ω—É—Ç—Ä–∏

    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–ª—å–ø–µ—Ä–∞...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())