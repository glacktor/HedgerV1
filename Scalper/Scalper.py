import json
import logging
import os
import asyncio
import time

from CexWsClients.AsyncBinanceWSClient import AsyncBinanceWSClient
from CexWsClients.AsyncHyperliquidWSClient import AsyncHyperliquidWSClient
from DragonflyDb.DragonFlyConnector import DragonFlyConnector
from InfoClients.AsyncBinanceInfoClient import AsyncBinanceInfoClient
from InfoClients.AsyncHyperliquidInfoClient import AsyncHyperliquidInfoClient
from config.config import ROI
logger = logging.getLogger(__name__)

async def init_exchange_client(exchange_name: str, config: dict, asset: str, db):
    print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {exchange_name}...")

    if exchange_name == "Binance":
        ws_client = AsyncBinanceWSClient(
            config["api_keys"]["binance"]["api_key"],
            config["api_keys"]["binance"]["api_secret"]
        )
        info_client = AsyncBinanceInfoClient(db)
        await ws_client.connect_ws()
        await ws_client.subscribe_orderbook(asset)

    elif exchange_name == "Hyperliquid":
        ws_client = AsyncHyperliquidWSClient.from_key(
            config["api_keys"]["hyperliquid"]["api_key"]
        )
        info_client = AsyncHyperliquidInfoClient(db)
        await ws_client.connect_ws()
        await ws_client.subscribe_orderbook(asset)

    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±–º–µ–Ω–Ω–∏–∫: {exchange_name}")

    print(f"‚úÖ {exchange_name} –≥–æ—Ç–æ–≤")
    return ws_client, info_client

class Scalper:
    def _calculate_base_quantity(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return (self.config['trading_parameters']['margin'] *
                self.config['trading_parameters']['leverage'] /
                self.config['trading_parameters']['parts'])

    async def _setup_exchange_quantity(self, base_quantity: float, is_first: bool = False, is_second: bool = False):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏ —Å —É—á–µ—Ç–æ–º precision"""

        if is_first:
            exchange_name = self.exchange1_name
            websocket = self.exchange1
        else:
            exchange_name = self.exchange2_name
            websocket = self.exchange2

        if exchange_name == "Binance":
            # –î–ª—è Binance –ø–æ–ª—É—á–∞–µ–º precision
            symbol_info = await websocket.get_symbol_info(self.asset)
            qty_precision = symbol_info['quantityPrecision']
            final_qty = round(base_quantity, qty_precision)

        elif exchange_name == "Hyperliquid":
            # –î–ª—è Hyperliquid –ø–æ–ª—É—á–∞–µ–º precision
            symbol_info = await websocket.get_symbol_info(self.asset)
            qty_precision = symbol_info['quantityPrecision']
            final_qty = round(base_quantity, qty_precision)

        else:
            final_qty = round(base_quantity, 6)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 6 –∑–Ω–∞–∫–æ–≤

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if is_first:
            self.dealqty1 = final_qty
        else:
            self.dealqty2 = final_qty

        # –í–ê–ñ–ù–û: –¥–µ–ª–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏
        if hasattr(self, 'dealqty1') and hasattr(self, 'dealqty2'):
            # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π precision –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            min_precision = min(
                len(str(self.dealqty1).split('.')[-1]) if '.' in str(self.dealqty1) else 0,
                len(str(self.dealqty2).split('.')[-1]) if '.' in str(self.dealqty2) else 0
            )
            sync_qty = round(min(self.dealqty1, self.dealqty2), min_precision)
            self.dealqty1 = sync_qty
            self.dealqty2 = sync_qty
    def _extract_fill_size(self, order_status, original_order):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        if not order_status:
            return 0.0

        fill_sz = order_status.get('fillSz', 0)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(fill_sz, str):
            if fill_sz in ['Order has zero size.', '']:
                return float(original_order.get('qty', 0))
            try:
                return float(fill_sz)
            except:
                return 0.0

        return float(fill_sz) if fill_sz else 0.0

    def __init__(self,asset,config_path: str = r"C:/Users/strel/PycharmProjects/rn_need_projects/jekius_maximus/logic/config.json"):
        self.asset = asset
        self.initialized = False
        self.exchange1_name = 'Binance'
        self.exchange2_name = 'Hyperliquid'
        self.frstDrctn = None
        self.scndDrctn = None
        if not os.path.exists(config_path):
            logger.error(f"Config file {config_path} not found")
            raise FileNotFoundError(f"Config file {config_path} not found")
        with open(config_path, 'r') as config_file:
            self.config = json.load(config_file)

    async def checkBeforeStart(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        """
        if self.initialized:
            return True

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
            await self._init_exchange_clients()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await self._setup_trading_parameters()

            self.initialized = True
            logger.info("‚úÖ Scalper –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Scalper: {e}")
            return False

    async def _init_exchange_clients(self):
        """–ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        # –§–ò–ö–°: —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ DB –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        db1 = DragonFlyConnector(exchange=self.exchange1_name.lower())  # "binance"
        db2 = DragonFlyConnector(exchange=self.exchange2_name.lower())  # "hyperliquid"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –æ–±–º–µ–Ω–Ω–∏–∫ —Å –µ–≥–æ DB
        self.exchange1, self.exchange1Info = await init_exchange_client(
            self.exchange1_name, self.config, self.asset, db1
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –æ–±–º–µ–Ω–Ω–∏–∫ —Å –µ–≥–æ DB
        self.exchange2, self.exchange2Info = await init_exchange_client(
            self.exchange2_name, self.config, self.asset, db2
        )

        # –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤...")
        await asyncio.sleep(3)
        await self._wait_for_orderbook()
        print("üöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ!")

    async def _wait_for_orderbook(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—Ä–¥–µ—Ä–±—É–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ"""
        for attempt in range(5):
            try:
                ob1, ob2 = await asyncio.gather(
                    self.exchange1Info.get_orderbook(self.asset),
                    self.exchange2Info.get_orderbook(self.asset)
                )

                if (ob1.get('bids', []) and ob2.get('asks', [])):
                    logger.info("‚úÖ –û—Ä–¥–µ—Ä–±—É–∫–∏ –≥–æ—Ç–æ–≤—ã")
                    return True

            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º

            await asyncio.sleep(1)

        raise Exception("–û—Ä–¥–µ—Ä–±—É–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏—Å—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥")

    async def _setup_trading_parameters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±–µ–∏—Ö –±–∏—Ä–∂"""
        base_usd_amount = self._calculate_base_quantity()

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        ob1 = await self.exchange1Info.get_orderbook(self.asset)
        ob2 = await self.exchange2Info.get_orderbook(self.asset)
        if not (ob1.get('asks') and ob2.get('asks')):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤")

        # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        avg_price = (float(ob1['asks'][0][0]) + float(ob2['asks'][0][0])) / 2

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
        base_quantity = base_usd_amount / avg_price

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º precision –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
        await self._setup_exchange_quantity(base_quantity, is_first=True)
        await self._setup_exchange_quantity(base_quantity, is_second=True)

        logger.info(f"üí∞ –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${base_usd_amount:.2f} | ~{base_quantity:.6f} {self.asset}")

    async def _complete_with_market(self, exchange_ws, info_client, order_id, direction, remaining_qty):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ä–¥–µ—Ä –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–æ–º"""
        try:
            if remaining_qty <= 0.001:
                return

            exchange_name = self.exchange1_name if exchange_ws == self.exchange1 else self.exchange2_name

            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ä–¥–µ—Ä
            await self.cancel_order(exchange_ws, self.asset, order_id)

            # –†–∞–∑–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ç –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫
            logger.info(f"üí• {exchange_name}: –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ä–∫–µ—Ç–æ–º {remaining_qty:.6f}")
            await exchange_ws.place_market_order(self.asset, direction, remaining_qty)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–æ–º: {e}")

    async def fillOrdr(self, exchange_client, info_client, orderId, direction, qty):
        """–ü—Ä–æ—Å—Ç–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Ç–∏–∫-—Å–∞–π–∑ ‚Üí –º–∞—Ä–∫–µ—Ç"""
        exchange_name = self.exchange1_name if exchange_client == self.exchange1 else self.exchange2_name

        # –≠–¢–ê–ü 1: –ñ–¥–µ–º –æ–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ (3 —Å–µ–∫—É–Ω–¥—ã)
        start_time = time.time()
        logger.info(f"üîÑ –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è {exchange_name} –æ—Ä–¥–µ—Ä–∞ {orderId}...")

        while time.time() - start_time < 3.0:
            status = await info_client.get_order_status(order_id=orderId)
            if not status:
                await asyncio.sleep(0.2)
                continue

            total_filled = self._extract_fill_size(status, {'qty': qty})

            if total_filled == qty:
                logger.info(f"‚úÖ {exchange_name} –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {total_filled:.6f}")
                return True

            await asyncio.sleep(0.2)

        # –≠–¢–ê–ü 2: –¢–∏–∫-—Å–∞–π–∑ –ª–∏–º–∏—Ç (1 –ø–æ–ø—ã—Ç–∫–∞)
        try:
            logger.info(f"üéØ {exchange_name}: –æ—Ä–¥–µ—Ä +1 —Ç–∏–∫ –æ—Ç –ª—É—á—à–µ–π —Ü–µ–Ω—ã")

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ä–¥–µ—Ä
            await self.cancel_order(exchange_client, self.asset, orderId)

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            status = await info_client.get_order_status(order_id=orderId)
            current_filled = self._extract_fill_size(status, {'qty': qty})
            remaining = qty - current_filled

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫-—Å–∞–π–∑ –∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            tick_size = float(await exchange_client.get_tick_size(self.asset))
            orderbook = await self._get_orderbook_for_client(exchange_client, self.asset)

            if direction == "long":
                # –ü–æ–∫—É–ø–∞–µ–º - –±–µ—Ä–µ–º –ª—É—á—à–∏–π ask + 1 —Ç–∏–∫
                best_price = float(orderbook['asks'][0][0])
                tick_price = best_price + tick_size
            else:
                # –ü—Ä–æ–¥–∞–µ–º - –±–µ—Ä–µ–º –ª—É—á—à–∏–π bid - 1 —Ç–∏–∫
                best_price = float(orderbook['bids'][0][0])
                tick_price = best_price - tick_size

            # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç +/- 1 —Ç–∏–∫
            tick_order = await exchange_client.place_limit_order(
                symbol=self.asset,
                side=direction,
                price=tick_price,
                qty=remaining
            )

            logger.info(f"üìå {exchange_name}: –ª–∏–º–∏—Ç –ø–æ —Ü–µ–Ω–µ {tick_price:.6f} (—Ç–∏–∫={tick_size})")

            # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∏–∫-–ª–∏–º–∏—Ç–∞ (2 —Å–µ–∫—É–Ω–¥—ã)
            tick_start = time.time()
            while time.time() - tick_start < 2.0:
                status = await info_client.get_order_status(tick_order['orderId'])
                if status:
                    filled = self._extract_fill_size(status, {'qty': remaining})
                    if filled >= remaining * 0.99:
                        logger.info(f"‚úÖ {exchange_name}: —Ç–∏–∫-–ª–∏–º–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω")
                        return True
                await asyncio.sleep(0.1)

            # –¢–∏–∫-–ª–∏–º–∏—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ—Ç–º–µ–Ω—è–µ–º
            await self.cancel_order(exchange_client, self.asset, tick_order['orderId'])

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Ç–∏–∫-–ª–∏–º–∏—Ç–∞
            status = await info_client.get_order_status(tick_order['orderId'])
            tick_filled = self._extract_fill_size(status, {'qty': remaining})
            final_remaining = remaining - tick_filled

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∏–∫-–ª–∏–º–∏—Ç–∞ {exchange_name}: {e}")
            final_remaining = remaining

        # –≠–¢–ê–ü 3: –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä
        try:

            await exchange_client.place_market_order(
                symbol=self.asset,
                side=direction,
                qty=final_remaining
            )

            logger.info(f"‚úÖ {exchange_name}: –º–∞—Ä–∫–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞ {exchange_name}: {e}")
            return False

    async def _get_orderbook_for_client(self, exchange_client, symbol, depth=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ —á–µ—Ä–µ–∑ Info –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
        if exchange_client == self.exchange1:
            return await self.exchange1Info.get_orderbook(symbol=symbol)
        elif exchange_client == self.exchange2:
            return await self.exchange2Info.get_orderbook(symbol=symbol)
        else:
            raise ValueError("Unknown exchange client")

    async def cancel_order(self, exchangeWebSocket, symbol, order_id):
        max_attempts = 2
        for attempt in range(1, max_attempts + 1):
            try:
                return await exchangeWebSocket.cancel_order(symbol, order_id)
            except Exception as e:
                txt = str(e).lower()
                keywords_map = {
                    "poz filled": ["filled", "already filled", "cannot cancel filled"],
                    "order not found": ["not found", "does not exist", "unknown order"],
                    "invalid order": ["invalid order", "bad order", "unsupported"],
                }
                for result, keys in keywords_map.items():
                    if any(k in txt for k in keys):
                        return result
                if attempt < max_attempts:
                    await asyncio.sleep(0.1)
                    continue
                return f"error: {txt}"
        return "cancel failed"

    async def fillDeal(self, frstOrdr, scndOrdr):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º –Ω–∞ –ø–∏–∫–µ"""
        logger.info(f"üéØ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤: {frstOrdr['orderId']} | {scndOrdr['orderId']}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∏–∫–æ–≤–æ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è
            target_qty1 = float(frstOrdr.get('qty', 0))
            target_qty2 = float(scndOrdr.get('qty', 0))

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            pos1_info = await self.exchange1.get_position_info(self.asset)
            pos2_info = await self.exchange2.get_position_info(self.asset)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
            pos1_size = 0
            pos2_size = 0

            if isinstance(pos1_info, list):
                for pos in pos1_info:
                    if pos.get('symbol') == f"{self.asset}USDT":
                        pos1_size = abs(float(pos.get('positionAmt', 0)))
                        break
            elif pos1_info:
                pos1_size = abs(float(pos1_info.get('size', 0)))

            if pos2_info:
                pos2_size = abs(float(pos2_info.get('size', 0)))

            logger.info(f"üí∞ –ü–æ–∑–∏—Ü–∏–∏ : {pos1_size:.4f}/{target_qty1:.4f} | {pos2_size:.4f}/{target_qty2:.4f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
            tolerance = 0.001
            filled1 = pos1_size >= target_qty1
            filled2 = pos2_size >= target_qty2

            # –û–±–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if filled1 and filled2:
                logger.info("‚úÖ –û–±–∞ –æ—Ä–¥–µ—Ä–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞ –ø–∏–∫–µ")
                return True

            # –ü–µ—Ä–≤—ã–π –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π
            if filled1 and not filled2:
                logger.info("üîÑ –ü–µ—Ä–≤—ã–π –≥–æ—Ç–æ–≤, –¥–æ–±–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π")
                remaining = target_qty2 - pos2_size
                print("remaining"+str(remaining))
                return await self.fillOrdr(self.exchange2, self.exchange2Info, scndOrdr['orderId'] , self.scndDrctn,
                                           remaining)

            # –í—Ç–æ—Ä–æ–π –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π
            if filled2 and not filled1:
                logger.info("üîÑ –í—Ç–æ—Ä–æ–π –≥–æ—Ç–æ–≤, –¥–æ–±–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π")
                remaining = target_qty1 - pos1_size
                print("remaining"+str(remaining))
                return await self.fillOrdr(self.exchange1, self.exchange1Info, frstOrdr['orderId'], self.frstDrctn,
                                           remaining)

            logger.info("üéØ –ó–∞–ø—É—Å–∫ —É–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞ –ø–∏–∫–µ (6—Å)")
            await self.highestOrdersFor(6)
            tasks = []
            if not filled1:
                remaining1 = target_qty1 - pos1_size
                tasks.append(self.exchange1.place_market_order(self.asset, self.frstDrctn, remaining1))

            if not filled2:
                remaining2 = target_qty2 - pos2_size
                tasks.append(self.exchange2.place_market_order(self.asset, self.scndDrctn, remaining2))

            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
                logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–º")

            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fillDeal: {e}")

            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–º
            try:
                await asyncio.gather(
                    self.exchange1.place_market_order(self.asset, self.frstDrctn, self.dealqty1),
                    self.exchange2.place_market_order(self.asset, self.scndDrctn, self.dealqty2),
                    return_exceptions=True
                )
                logger.info("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–æ–º")
            except Exception as emergency_e:
                logger.error(f"‚ùå –ü—Ä–æ–≤–∞–ª —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {emergency_e}")

            return False

    async def highestOrdersFor(self, seconds):
        """
        –£–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä—ã –Ω–∞ –ø–∏–∫–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.frstDrctn, self.scndDrctn, self.dealqty1, self.dealqty2
        """
        if not self.initialized:
            raise RuntimeError("Scalper –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        if not hasattr(self, 'frstDrctn') or not self.frstDrctn:
            raise RuntimeError("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ side –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Ü–µ–Ω
        side1 = 'buy' if self.frstDrctn == 'long' else 'sell'
        side2 = 'buy' if self.scndDrctn == 'long' else 'sell'

        start_time = time.time()
        order1_id = None
        order2_id = None

        logger.info(f"üéØ –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∏–∫–∞ –Ω–∞ {seconds}—Å")

        try:
            while time.time() - start_time < seconds:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏
                ob1, ob2 = await asyncio.gather(
                    self.exchange1Info.get_orderbook(self.asset),
                    self.exchange2Info.get_orderbook(self.asset),
                    return_exceptions=True
                )

                if isinstance(ob1, Exception) or isinstance(ob2, Exception):
                    await asyncio.sleep(0.1)
                    continue

                if not (ob1.get('bids') and ob1.get('asks') and ob2.get('bids') and ob2.get('asks')):
                    await asyncio.sleep(0.1)
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ø–∏–∫–µ
                tick1 = float(await self.exchange1.get_tick_size(self.asset))
                tick2 = float(await self.exchange2.get_tick_size(self.asset))

                if side1 == 'buy':
                    target_price1 = float(ob1['bids'][0][0]) + tick1
                else:
                    target_price1 = float(ob1['asks'][0][0]) - tick1

                if side2 == 'buy':
                    target_price2 = float(ob2['bids'][0][0]) + tick2
                else:
                    target_price2 = float(ob2['asks'][0][0]) - tick2

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ exchange1
                needs_update1 = True
                if order1_id:
                    try:
                        status = await self.exchange1Info.get_order_status(order1_id)
                        if status and abs(float(status.get('price', 0)) - target_price1) < tick1 / 2:
                            needs_update1 = False
                    except:
                        pass

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ exchange2
                needs_update2 = True
                if order2_id:
                    try:
                        status = await self.exchange2Info.get_order_status(order2_id)
                        if status and abs(float(status.get('price', 0)) - target_price2) < tick2 / 2:
                            needs_update2 = False
                    except:
                        pass

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                tasks = []

                if needs_update1:
                    if order1_id:
                        tasks.append(self.cancel_order(self.exchange1, self.asset, order1_id))
                    tasks.append(
                        self.exchange1.place_limit_order(self.asset, self.frstDrctn, target_price1, self.dealqty1))

                if needs_update2:
                    if order2_id:
                        tasks.append(self.cancel_order(self.exchange2, self.asset, order2_id))
                    tasks.append(
                        self.exchange2.place_limit_order(self.asset, self.scndDrctn, target_price2, self.dealqty2))

                if tasks:
                    results = await asyncio.gather(*tasks, return_exceptions=True)

                    # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ—Ä–¥–µ—Ä–æ–≤
                    if needs_update1:
                        order1_id = results[-2]['orderId'] if len(results) >= 2 and isinstance(results[-2],
                                                                                               dict) else None
                    if needs_update2:
                        order2_id = results[-1]['orderId'] if len(results) >= 1 and isinstance(results[-1],
                                                                                               dict) else None

                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Ä–¥–µ—Ä—ã: {target_price1:.6f} | {target_price2:.6f}")

                await asyncio.sleep(0.2)  # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ highestOrdersFor: {e}")
        finally:
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ä–¥–µ—Ä—ã
            cleanup_tasks = []
            if order1_id:
                cleanup_tasks.append(self.cancel_order(self.exchange1, self.asset, order1_id))
            if order2_id:
                cleanup_tasks.append(self.cancel_order(self.exchange2, self.asset, order2_id))

            if cleanup_tasks:
                await asyncio.gather(*cleanup_tasks, return_exceptions=True)

            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

        return {'order1_id': order1_id, 'order2_id': order2_id}

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    # await scalper.highestOrdersFor(30)  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–∏–∫–µ

    async def FindDeal(self):
        if not self.initialized:
            raise RuntimeError("Scalper –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            # 1. –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò
        # has_open_positions = await self._check_has_positions()

        # 2. –ï–°–õ–ò –ï–°–¢–¨ –ü–û–ó–ò–¶–ò–ò - –ü–´–¢–ê–ï–ú–°–Ø –ó–ê–ö–†–´–¢–¨
        # if has_open_positions:
        #     logger.info("üìç –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å")
        #     closed = await self.closingDeal()
        #     if closed:
        #         logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
        #         await self.verify_positions_after_close()
        #     await asyncio.sleep(0.5)

            # 3. –ï–°–õ–ò –ù–ï–¢ –ü–û–ó–ò–¶–ò–ô - –ò–©–ï–ú –ù–û–í–£–Æ –°–î–ï–õ–ö–£
        while True:
            try:
                ob1 = await self.exchange1Info.get_orderbook(self.asset)
                ob2 = await self.exchange2Info.get_orderbook(self.asset)

                if not (ob1.get('bids') and ob1.get('asks') and ob2.get('bids') and ob2.get('asks')):
                    print("‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –æ—Ä–¥–µ—Ä–±—É–∫–∏")
                    await asyncio.sleep(0.1)
                    continue

                bid1, ask1 = float(ob1['bids'][0][0]), float(ob1['asks'][0][0])
                bid2, ask2 = float(ob2['bids'][0][0]), float(ob2['asks'][0][0])

                spread1 = 1 - ask1 / bid2  # Binance long / Hyperliquid short
                spread2 = 1 - ask2 / bid1  # Hyperliquid long / Binance short
                min_spread = 0.0026

                # –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–ü–†–ï–î–´ –ü–û–°–¢–û–Ø–ù–ù–û
                print(f"üîç –ü–æ–∏—Å–∫: spread1={spread1:.6f} | spread2={spread2:.6f} | –º–∏–Ω={min_spread}")

                # 4. –ï–°–õ–ò –•–û–†–û–®–ò–ô –°–ü–†–ï–î - –û–¢–ö–†–´–í–ê–ï–ú
                if spread1 >= min_spread or spread2 >= min_spread:

                    if spread1 >= min_spread:
                        self.frstDrctn = 'long'
                        self.scndDrctn = 'short'
                        logger.info(f'üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º spread1: {spread1:.4f}')
                        print(ob1)
                        print(ob2)
                        print(f"üìä {self.exchange1_name} long@{bid1} | {self.exchange2_name} short@{ask2}")

                        frstOrdr, scndOrdr = await asyncio.gather(
                            self.exchange1.place_limit_order(self.asset, self.frstDrctn, ask1, self.dealqty1),
                            self.exchange2.place_limit_order(self.asset, self.scndDrctn, bid2, self.dealqty2)
                        )
                    else:
                        self.frstDrctn = 'short'
                        self.scndDrctn = 'long'
                        logger.info(f'üéØ –û—Ç–∫—Ä—ã–≤–∞–µ–º spread2: {spread2:.4f}')
                        print(f"üìä {self.exchange1_name} short@{ask1} | {self.exchange2_name} long@{bid2}")
                        print(ob1)
                        print(ob2)
                        frstOrdr, scndOrdr = await asyncio.gather(
                            self.exchange1.place_limit_order(self.asset, self.frstDrctn, bid1, self.dealqty1),
                            self.exchange2.place_limit_order(self.asset, self.scndDrctn, ask2, self.dealqty2)
                        )

                    # 5. –ò–°–ü–û–õ–ù–Ø–ï–ú –°–î–ï–õ–ö–£
                    success = await self.fillDeal(frstOrdr, scndOrdr)

                    if success:
                        logger.info("‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞")
                        await self.verify_positions_after_open()
                        await asyncio.get_event_loop().run_in_executor(None, input, "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                        await self.closingDeal()
                    else:
                        logger.info("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å")

                    await asyncio.sleep(1)

                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–ø—Ä–µ–¥—ã –º–∞–ª–µ–Ω—å–∫–∏–µ
                    if spread1 > 0.0005 or spread2 > 0.0005:
                        print(f"üìâ –°–ø—Ä–µ–¥—ã –±–ª–∏–∑–∫–æ: s1={spread1:.6f} s2={spread2:.6f}")
                    await asyncio.sleep(0.1)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ FindDeal: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(1)

    async def _check_has_positions(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        try:
            pos1_info = await self.exchange1.get_position_info(self.asset)
            pos2_info = await self.exchange2.get_position_info(self.asset)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –±–∏—Ä–∂—É
            has_pos1 = False
            if isinstance(pos1_info, list):
                for pos in pos1_info:
                    if pos.get('symbol') == f"{self.asset}USDT" and abs(float(pos.get('positionAmt', 0))) > 0.001:
                        has_pos1 = True
                        break
            elif pos1_info and abs(pos1_info.get('size', 0)) > 0.001:
                has_pos1 = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é –±–∏—Ä–∂—É
            has_pos2 = pos2_info and abs(pos2_info.get('size', 0)) > 0.001

            return has_pos1 or has_pos2

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False

    async def verify_positions_after_open(self):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏"""
        try:
            logger.info("üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è")

            pos1_info = await self.exchange1.get_position_info(self.asset)
            pos2_info = await self.exchange2.get_position_info(self.asset)

            # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï —Ä–∞–∑–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            pos1_size = 0
            pos2_size = 0

            # Binance - –∏—Å–ø–æ–ª—å–∑—É–µ–º positionAmt –Ω–∞–ø—Ä—è–º—É—é (—É–∂–µ —Å –∑–Ω–∞–∫–æ–º)
            if isinstance(pos1_info, list):
                for pos in pos1_info:
                    if pos.get('symbol') == f"{self.asset}USDT":
                        pos1_size = float(pos.get('positionAmt', 0))  # –ë–ï–ó abs()
                        break
            elif pos1_info and pos1_info.get('size', 0) != 0:
                # –ï—Å–ª–∏ get_position_info –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å size –∏ side
                size = float(pos1_info.get('size', 0))
                side = pos1_info.get('side', 'long')
                pos1_size = size if side == 'long' else -size

            # Hyperliquid - —Ç–æ–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–Ω–∞–∫
            if pos2_info and pos2_info.get('size', 0) != 0:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–Ω–∞–∫ –∏–∑ user_state
                try:
                    user_state = await asyncio.get_running_loop().run_in_executor(
                        None, self.exchange2.exchange.info.user_state, self.exchange2.account_address
                    )
                    for pos in user_state.get('assetPositions', []):
                        if pos['position']['coin'] == self.asset:
                            pos2_size = float(pos['position']['szi'])  # szi —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
                            break
                except:
                    # –§–æ–ª–ª–±—ç–∫ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–¥–µ–ª–∫–∏
                    size = float(pos2_info.get('size', 0))
                    pos2_size = size if self.scndDrctn == 'long' else -size

            # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            expected1 = self.dealqty1 if self.frstDrctn == 'long' else -self.dealqty1
            expected2 = self.dealqty2 if self.scndDrctn == 'long' else -self.dealqty2

            logger.info(f"üìä –ü–æ–∑–∏—Ü–∏–∏: {self.exchange1_name}={pos1_size:.6f} | {self.exchange2_name}={pos2_size:.6f}")
            logger.info(f"üìä –û–∂–∏–¥–∞–µ–º—ã–µ: {expected1:.6f} | {expected2:.6f}")

            # –¢–û–õ–¨–ö–û –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è, –ù–ï –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            tolerance = 0.01
            delta1 = pos1_size - expected1
            delta2 = pos2_size - expected2

            if abs(delta1) > tolerance:
                logger.warning(f"‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {self.exchange1_name}: delta={delta1:.6f}")

            if abs(delta2) > tolerance:
                logger.warning(f"‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {self.exchange2_name}: delta={delta2:.6f}")

            # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã - –ù–ï —Ç–æ—Ä–≥—É–µ–º –¥–∞–ª—å—à–µ
            if abs(delta1) > self.dealqty1 * 0.1 or abs(delta2) > self.dealqty2 * 0.1:
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π!")
                return False

            logger.info("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    async def verify_positions_after_close(self):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã"""
        try:
            logger.info("üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")

            pos1_info = await self.exchange1.get_position_info(self.asset)
            pos2_info = await self.exchange2.get_position_info(self.asset)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã
            pos1_size = 0
            pos2_size = 0

            if isinstance(pos1_info, list):
                for pos in pos1_info:
                    if pos.get('symbol') == f"{self.asset}USDT":
                        pos1_size = float(pos.get('positionAmt', 0))
                        break
            elif pos1_info:
                pos1_size = abs(float(pos1_info.get('size', 0)))

            if pos2_info:
                pos2_size = abs(float(pos2_info.get('size', 0)))

            logger.info(
                f"üìä –û—Å—Ç–∞—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {self.exchange1_name}={pos1_size:.6f} | {self.exchange2_name}={pos2_size:.6f}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            if pos1_size > 0.001:
                logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ {self.exchange1_name}: {pos1_size:.6f}")
                close_side = "short" if self.frstDrctn == 'long' else "long"
                await self.exchange1.place_market_order(self.asset, close_side, pos1_size)

            if pos2_size > 0.001:
                logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ {self.exchange2_name}: {pos2_size:.6f}")
                close_side = "long" if self.scndDrctn == 'short' else "short"
                await self.exchange2.place_market_order(self.asset, close_side, pos2_size)

            logger.info("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return False

    async def _balance_position(self, exchange_ws, exchange_name: str, delta: float, direction: str):
        """–ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–µ (–∫–∞–∫ –≤ LongShort)"""
        try:
            abs_delta = abs(delta)
            if abs_delta < 0.001:
                return

            logger.info(f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ {exchange_name}: delta={delta:.6f}")

            if delta > 0:
                # –ò–∑–±—ã—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ - –∑–∞–∫—Ä—ã–≤–∞–µ–º
                close_side = "short" if direction == 'long' else "long"
                await exchange_ws.place_market_order(self.asset, close_side, abs_delta)
                logger.info(f"üìâ {exchange_name}: –∑–∞–∫—Ä—ã–ª–∏ –∏–∑–ª–∏—à–µ–∫ {abs_delta:.6f}")
            else:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ - –¥–æ–±–∏—Ä–∞–µ–º
                await exchange_ws.place_market_order(self.asset, direction, abs_delta)
                logger.info(f"üìà {exchange_name}: –¥–æ–±—Ä–∞–ª–∏ {abs_delta:.6f}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ {exchange_name}: {e}")

    async def closingDeal(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ROI –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏"""
        logger.info("üéØ –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ROI –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")

        while True:
            try:
                pos1_info = await self.exchange1.get_position_info(self.asset)
                pos2_info = await self.exchange2.get_position_info(self.asset)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
                if not pos1_info or not pos2_info:
                    logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                    await asyncio.sleep(5)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –∏ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                pos1_size = 0
                pos2_size = 0
                entry_price1 = 0
                entry_price2 = 0

                # –î–ª—è Binance - –∏—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É –≤ —Å–ø–∏—Å–∫–µ
                if isinstance(pos1_info, list):
                    for pos in pos1_info:
                        if pos.get('symbol') == f"{self.asset}USDT":
                            pos1_size = float(pos.get('positionAmt', 0))
                            entry_price1 = float(pos.get('entryPrice', 0))
                            break
                elif isinstance(pos1_info, dict):
                    pos1_size = abs(float(pos1_info.get('size', 0)))
                    entry_price1 = float(pos1_info.get('avg_price', 0))
                else:
                    pos1_size = abs(float(pos1_info)) if pos1_info != 0 else 0

                if isinstance(pos2_info, dict):
                    pos2_size = abs(float(pos2_info.get('size', 0)))
                    entry_price2 = float(pos2_info.get('avg_price', 0))
                else:
                    pos2_size = abs(float(pos2_info)) if pos2_info != 0 else 0

                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π
                if pos1_size < 0.001 or pos2_size < 0.001:
                    logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                    await asyncio.sleep(5)
                    continue

                if entry_price1 <= 0 or entry_price2 <= 0:
                    logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
                    await asyncio.sleep(2)
                    continue

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞
                ob1 = await self.exchange1Info.get_orderbook(self.asset)
                ob2 = await self.exchange2Info.get_orderbook(self.asset)

                if not (ob1.get('bids') and ob1.get('asks') and ob2.get('bids') and ob2.get('asks')):
                    await asyncio.sleep(1)
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                is_long1 = pos1_size > 0 if isinstance(pos1_info, list) else True

                if is_long1:
                    exit_price1 = float(ob1['bids'][0][0])
                    exit_price2 = float(ob2['asks'][0][0])
                    roi1 = (exit_price1 / entry_price1 - 1) * 100
                    roi2 = (entry_price2 / exit_price2 - 1) * 100
                else:
                    exit_price1 = float(ob1['asks'][0][0])
                    exit_price2 = float(ob2['bids'][0][0])
                    roi1 = (entry_price1 / exit_price1 - 1) * 100
                    roi2 = (exit_price2 / entry_price2 - 1) * 100

                total_roi = roi1 + roi2
                target_roi = ROI

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ROI –∫–∞–∂–¥—ã–µ 5 –∏—Ç–µ—Ä–∞—Ü–∏–π
                print(f"üí∞ ROI: {total_roi:.3f}% | Target: {target_roi}% | –ü–æ–∑–∏—Ü–∏–∏: {pos1_size:.3f}/{pos2_size:.3f}")

                if total_roi >= target_roi:
                    qty = min(abs(pos1_size), abs(pos2_size))

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—ä–µ–º–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                    if is_long1:
                        available_qty1 = float(ob1['bids'][0][1])
                        available_qty2 = float(ob2['asks'][0][1])
                    else:
                        available_qty1 = float(ob1['asks'][0][1])
                        available_qty2 = float(ob2['bids'][0][1])

                    if available_qty1 < qty or available_qty2 < qty:
                        logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                        await asyncio.sleep(1)
                        continue

                    logger.info(f'üéØ ROI {total_roi:.2f}% –¥–æ—Å—Ç–∏–≥–Ω—É—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º!')

                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
                    close1_side = self.opposite_side(self.frstDrctn)
                    close2_side = self.opposite_side(self.scndDrctn)

                    close1_task = self.exchange1.close_limit_order(
                        self.asset, close1_side, exit_price1, qty
                    )
                    close2_task = self.exchange2.close_limit_order(
                        self.asset, close2_side, exit_price2, qty
                    )

                    close1, close2 = await asyncio.gather(close1_task, close2_task)
                    print(close1)
                    print(close2)
                    success = await self.fillDeal(close1, close2)

                    if success:
                        logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")
                        await self.verify_positions_after_close()
                        return True
                    else:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π")

                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ closingDeal: {e}")
                await asyncio.sleep(2)
                continue

    def opposite_side(self, side: str) -> str:
        return 'short' if side.lower() == 'long' else 'long'